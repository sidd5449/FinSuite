{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { planLimits } from '@/lib/subscriptions';\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  const sessionToken = cookies().get('session')?.value;\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(sessionToken && { 'Authorization': `Bearer ${sessionToken}` }),\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      // For 403 Forbidden, we want to show a specific message from the API\n      if (res.status === 403) {\n          throw new Error(errorBody.message || 'You do not have permission to perform this action. Please upgrade your plan.');\n      }\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call a /login API endpoint\n  // that validates hashed passwords.\n  if (email === 'user@example.com' && password === 'password') {\n    // For this demo, we use the user's email as their session \"token\".\n    // This allows the backend to identify the user for each request.\n    cookies().set('session', email, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- User Actions ---\nexport async function getUserAction() {\n  try {\n    const user = await apiFetch('/users/me');\n    return { success: true, data: user };\n  } catch (error) {\n    return { success: false, error: 'User not found.' };\n  }\n}\n\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    // The backend will now check the user's plan and invoice count before creating.\n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    revalidatePath('/dashboard/settings'); // To update usage display\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Subscription Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\nexport async function createCheckoutSessionAction(priceId: string) {\n    try {\n        const result = await apiFetch('/subscriptions/create-checkout-session', {\n            method: 'POST',\n            body: JSON.stringify({ priceId }),\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create checkout session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create checkout session.' };\n    }\n}\n\nexport async function createPortalSessionAction() {\n    try {\n        const result = await apiFetch('/subscriptions/create-portal-session', {\n            method: 'POST'\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create portal session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create portal session.' };\n    }\n}\n\n\n// --- AI Actions ---\n\nasync function checkAiUsageLimit() {\n    const userResult = await getUserAction();\n    if (!userResult.success) {\n        throw new Error('Could not identify user. Please log in again.');\n    }\n    const user = userResult.data;\n    const limits = planLimits[user.plan as keyof typeof planLimits] || planLimits.free;\n\n    if (user.aiRequestCount >= limits.aiRequests) {\n        throw new Error(`You have reached your monthly limit of ${limits.aiRequests} AI requests. Please upgrade your plan.`);\n    }\n}\n\nasync function incrementAiUsage() {\n    try {\n        await apiFetch('/users/me/increment-ai', { method: 'PUT' });\n        revalidatePath('/dashboard/settings');\n    } catch (error) {\n        console.error(\"Failed to increment AI usage count:\", error);\n        // We don't throw here to not fail the main operation, but we log the error.\n    }\n}\n\nexport async function getFinancialInsightsAction() {\n  try {\n    await checkAiUsageLimit();\n\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    });\n\n    await incrementAiUsage();\n    return { success: true, data: insights };\n  } catch (error) {\n    console.error('Error generating financial insights:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate financial insights.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    await checkAiUsageLimit();\n    const result = await generateInvoiceFromText(text);\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate invoice from text.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    await checkAiUsageLimit();\n    const result = await calculateTax({ address, subtotal });\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    const message = error instanceof Error ? error.message : 'Failed to calculate tax with AI.';\n    return { success: false, error: message };\n  }\n}\n"],"names":[],"mappings":";;;;;;IA8VsB,4BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { planLimits } from '@/lib/subscriptions';\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  const sessionToken = cookies().get('session')?.value;\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(sessionToken && { 'Authorization': `Bearer ${sessionToken}` }),\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      // For 403 Forbidden, we want to show a specific message from the API\n      if (res.status === 403) {\n          throw new Error(errorBody.message || 'You do not have permission to perform this action. Please upgrade your plan.');\n      }\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call a /login API endpoint\n  // that validates hashed passwords.\n  if (email === 'user@example.com' && password === 'password') {\n    // For this demo, we use the user's email as their session \"token\".\n    // This allows the backend to identify the user for each request.\n    cookies().set('session', email, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- User Actions ---\nexport async function getUserAction() {\n  try {\n    const user = await apiFetch('/users/me');\n    return { success: true, data: user };\n  } catch (error) {\n    return { success: false, error: 'User not found.' };\n  }\n}\n\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    // The backend will now check the user's plan and invoice count before creating.\n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    revalidatePath('/dashboard/settings'); // To update usage display\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Subscription Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\nexport async function createCheckoutSessionAction(priceId: string) {\n    try {\n        const result = await apiFetch('/subscriptions/create-checkout-session', {\n            method: 'POST',\n            body: JSON.stringify({ priceId }),\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create checkout session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create checkout session.' };\n    }\n}\n\nexport async function createPortalSessionAction() {\n    try {\n        const result = await apiFetch('/subscriptions/create-portal-session', {\n            method: 'POST'\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create portal session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create portal session.' };\n    }\n}\n\n\n// --- AI Actions ---\n\nasync function checkAiUsageLimit() {\n    const userResult = await getUserAction();\n    if (!userResult.success) {\n        throw new Error('Could not identify user. Please log in again.');\n    }\n    const user = userResult.data;\n    const limits = planLimits[user.plan as keyof typeof planLimits] || planLimits.free;\n\n    if (user.aiRequestCount >= limits.aiRequests) {\n        throw new Error(`You have reached your monthly limit of ${limits.aiRequests} AI requests. Please upgrade your plan.`);\n    }\n}\n\nasync function incrementAiUsage() {\n    try {\n        await apiFetch('/users/me/increment-ai', { method: 'PUT' });\n        revalidatePath('/dashboard/settings');\n    } catch (error) {\n        console.error(\"Failed to increment AI usage count:\", error);\n        // We don't throw here to not fail the main operation, but we log the error.\n    }\n}\n\nexport async function getFinancialInsightsAction() {\n  try {\n    await checkAiUsageLimit();\n\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    });\n\n    await incrementAiUsage();\n    return { success: true, data: insights };\n  } catch (error) {\n    console.error('Error generating financial insights:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate financial insights.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    await checkAiUsageLimit();\n    const result = await generateInvoiceFromText(text);\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate invoice from text.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    await checkAiUsageLimit();\n    const result = await calculateTax({ address, subtotal });\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    const message = error instanceof Error ? error.message : 'Failed to calculate tax with AI.';\n    return { success: false, error: message };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAqFsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 299, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/subscriptions.ts"],"sourcesContent":["\nexport const subscriptionPlans = [\n    {\n        name: 'Basic',\n        description: 'For individuals and small teams getting started.',\n        price: '$10',\n        priceId: process.env.NEXT_PUBLIC_STRIPE_BASIC_PLAN_ID || 'price_basic_placeholder',\n        features: [\n            '10 invoices per month',\n            '25 AI requests per month',\n            'Basic reporting',\n            'Email support'\n        ]\n    },\n    {\n        name: 'Pro',\n        description: 'For growing businesses that need more power.',\n        price: '$25',\n        priceId: process.env.NEXT_PUBLIC_STRIPE_PRO_PLAN_ID || 'price_pro_placeholder',\n        isPopular: true,\n        features: [\n            '50 invoices per month',\n            '100 AI requests per month',\n            'Advanced reporting and analytics',\n            'Priority email support'\n        ]\n    },\n    {\n        name: 'Advanced',\n        description: 'For large teams and enterprises.',\n        price: '$50',\n        priceId: process.env.NEXT_PUBLIC_STRIPE_ADVANCED_PLAN_ID || 'price_advanced_placeholder',\n        features: [\n            'Unlimited invoices',\n            'Unlimited AI requests',\n            'Custom integrations',\n            'Dedicated phone support'\n        ]\n    }\n];\n\nexport const planLimits = {\n  free: { invoices: 5, aiRequests: 5 },\n  basic: { invoices: 10, aiRequests: 25 },\n  pro: { invoices: 50, aiRequests: 100 },\n  advanced: { invoices: Infinity, aiRequests: Infinity },\n};\n"],"names":[],"mappings":";;;;AACO,MAAM,oBAAoB;IAC7B;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS,QAAQ,GAAG,CAAC,gCAAgC,IAAI;QACzD,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;IACA;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS,QAAQ,GAAG,CAAC,8BAA8B,IAAI;QACvD,WAAW;QACX,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;IACA;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS,QAAQ,GAAG,CAAC,mCAAmC,IAAI;QAC5D,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;CACH;AAEM,MAAM,aAAa;IACxB,MAAM;QAAE,UAAU;QAAG,YAAY;IAAE;IACnC,OAAO;QAAE,UAAU;QAAI,YAAY;IAAG;IACtC,KAAK;QAAE,UAAU;QAAI,YAAY;IAAI;IACrC,UAAU;QAAE,UAAU;QAAU,YAAY;IAAS;AACvD","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/settings/page.tsx"],"sourcesContent":["'use client'\n\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport { Button } from '@/components/ui/button'\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { useToast } from '@/hooks/use-toast'\nimport { createPortalSessionAction, getUserAction } from '@/app/actions'\nimport { useEffect, useState } from 'react'\nimport { Crown, ExternalLink, Activity, FileText } from 'lucide-react'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Progress } from '@/components/ui/progress'\nimport { planLimits } from '@/lib/subscriptions'\n\nconst profileFormSchema = z.object({\n  name: z.string().min(2, {\n    message: 'Name must be at least 2 characters.',\n  }),\n  email: z.string().email(),\n})\n\ntype ProfileFormValues = z.infer<typeof profileFormSchema>\n\n// This can be used a mock user data\nconst defaultValues: Partial<ProfileFormValues> = {\n  name: 'Test User',\n  email: 'user@example.com',\n}\n\nconst passwordFormSchema = z.object({\n    currentPassword: z.string().min(1, 'Current password is required.'),\n    newPassword: z.string().min(8, 'New password must be at least 8 characters.'),\n    confirmPassword: z.string()\n}).refine(data => data.newPassword === data.confirmPassword, {\n    message: \"New passwords don't match\",\n    path: [\"confirmPassword\"],\n})\n\ninterface User {\n    plan: 'free' | 'basic' | 'pro' | 'advanced';\n    subscriptionStatus: string;\n    invoiceCount: number;\n    aiRequestCount: number;\n}\n\n\nexport default function SettingsPage() {\n  const { toast } = useToast()\n  const [user, setUser] = useState<User | null>(null);\n  const [loadingUser, setLoadingUser] = useState(true);\n\n  useEffect(() => {\n    async function fetchUser() {\n        setLoadingUser(true);\n        const result = await getUserAction();\n        if (result.success) {\n            setUser(result.data);\n        }\n        setLoadingUser(false);\n    }\n    fetchUser();\n  }, []);\n\n\n  const profileForm = useForm<ProfileFormValues>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues,\n    mode: 'onChange',\n  })\n\n  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({\n      resolver: zodResolver(passwordFormSchema),\n      defaultValues: {\n          currentPassword: \"\",\n          newPassword: \"\",\n          confirmPassword: \"\"\n      }\n  })\n\n  function onProfileSubmit(data: ProfileFormValues) {\n    toast({\n      title: 'Profile Updated',\n      description: 'Your profile information has been successfully updated.',\n    })\n    console.log(data)\n  }\n\n  function onPasswordSubmit(data: z.infer<typeof passwordFormSchema>) {\n    toast({\n        title: \"Password Updated\",\n        description: \"Your password has been changed successfully.\"\n    })\n    console.log(data)\n    passwordForm.reset()\n  }\n\n  const currentPlanLimits = user ? planLimits[user.plan] : planLimits.free;\n  const invoiceUsagePercentage = user ? (user.invoiceCount / currentPlanLimits.invoices) * 100 : 0;\n  const aiUsagePercentage = user ? (user.aiRequestCount / currentPlanLimits.aiRequests) * 100 : 0;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-headline font-bold tracking-tight\">Settings</h1>\n        <p className=\"text-muted-foreground\">Manage your account settings and preferences.</p>\n      </div>\n      \n      <Card>\n          <CardHeader>\n              <CardTitle className=\"font-headline flex items-center gap-2\">\n                <Crown />\n                Subscription & Usage\n              </CardTitle>\n              <CardDescription>Manage your billing and view your current usage.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {loadingUser ? (\n                <Skeleton className=\"h-10 w-1/2\" />\n            ) : user ? (\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 rounded-lg border bg-muted/50 p-4\">\n                    <div>\n                        <p className=\"font-semibold\">\n                            You are currently on the <span className=\"capitalize text-primary\">{user.plan}</span> plan.\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                            Status: <span className=\"capitalize\">{user.subscriptionStatus || 'Active'}</span>\n                        </p>\n                    </div>\n                     <form action={createPortalSessionAction}>\n                        <Button type=\"submit\" variant=\"outline\">\n                            Manage Billing\n                            <ExternalLink className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                    </form>\n                </div>\n            ) : (\n                 <p className=\"text-muted-foreground\">Could not load subscription details.</p>\n            )}\n\n            {loadingUser ? (\n                <div className=\"space-y-4\">\n                    <Skeleton className=\"h-8 w-full\" />\n                    <Skeleton className=\"h-8 w-full\" />\n                </div>\n            ) : user && (\n                <div className=\"space-y-4\">\n                    <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                            <p className=\"text-sm font-medium flex items-center gap-2\"><FileText /> Invoices</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.invoiceCount} / {currentPlanLimits.invoices === Infinity ? 'Unlimited' : currentPlanLimits.invoices}</p>\n                        </div>\n                        <Progress value={invoiceUsagePercentage} />\n                    </div>\n                     <div>\n                        <div className=\"flex justify-between items-center mb-1\">\n                            <p className=\"text-sm font-medium flex items-center gap-2\"><Activity /> AI Requests</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.aiRequestCount} / {currentPlanLimits.aiRequests === Infinity ? 'Unlimited' : currentPlanLimits.aiRequests}</p>\n                        </div>\n                        <Progress value={aiUsagePercentage} />\n                    </div>\n                </div>\n            )}\n          </CardContent>\n      </Card>\n\n\n      <Card>\n          <CardHeader>\n              <CardTitle>Profile</CardTitle>\n              <CardDescription>Update your personal information.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...profileForm}>\n                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className=\"space-y-8\">\n                <FormField\n                    control={profileForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                        <Input placeholder=\"Your Name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <FormField\n                    control={profileForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                        <Input type=\"email\" placeholder=\"your@email.com\" {...field} disabled />\n                        </FormControl>\n                        <FormDescription>\n                        You cannot change your login email.\n                        </FormDescription>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <Button type=\"submit\">Update Profile</Button>\n                </form>\n            </Form>\n          </CardContent>\n      </Card>\n      \n      <Card>\n          <CardHeader>\n              <CardTitle>Password</CardTitle>\n              <CardDescription>Change your password. Make sure it's a strong one.</CardDescription>\n          </CardHeader>\n          <CardContent>\n          <Form {...passwordForm}>\n            <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className=\"space-y-8\">\n                <FormField\n                    control={passwordForm.control}\n                    name=\"currentPassword\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Current Password</FormLabel>\n                        <FormControl>\n                        <Input type=\"password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <FormField\n                    control={passwordForm.control}\n                    name=\"newPassword\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>New Password</FormLabel>\n                        <FormControl>\n                        <Input type=\"password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                 <FormField\n                    control={passwordForm.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Confirm New Password</FormLabel>\n                        <FormControl>\n                        <Input type=\"password\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <Button type=\"submit\">Change Password</Button>\n            </form>\n            </Form>\n          </CardContent>\n      </Card>\n\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAvBA;;;;;;;;;;;;;;;;AAyBA,MAAM,oBAAoB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,EAAE;IACjC,MAAM,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;QACtB,SAAS;IACX;IACA,OAAO,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,KAAK;AACzB;AAIA,oCAAoC;AACpC,MAAM,gBAA4C;IAChD,MAAM;IACN,OAAO;AACT;AAEA,MAAM,qBAAqB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,EAAE;IAChC,iBAAiB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;IACnC,aAAa,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;IAC/B,iBAAiB,CAAA,GAAA,oIAAA,CAAA,SAAQ,AAAD;AAC5B,GAAG,MAAM,CAAC,CAAA,OAAQ,KAAK,WAAW,KAAK,KAAK,eAAe,EAAE;IACzD,SAAS;IACT,MAAM;QAAC;KAAkB;AAC7B;AAUe,SAAS;IACtB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACX,eAAe;YACf,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,gBAAa,AAAD;YACjC,IAAI,OAAO,OAAO,EAAE;gBAChB,QAAQ,OAAO,IAAI;YACvB;YACA,eAAe;QACnB;QACA;IACF,GAAG,EAAE;IAGL,MAAM,cAAc,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAqB;QAC7C,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE;QACtB;QACA,MAAM;IACR;IAEA,MAAM,eAAe,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAsC;QAC7D,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE;QACtB,eAAe;YACX,iBAAiB;YACjB,aAAa;YACb,iBAAiB;QACrB;IACJ;IAEA,SAAS,gBAAgB,IAAuB;QAC9C,MAAM;YACJ,OAAO;YACP,aAAa;QACf;QACA,QAAQ,GAAG,CAAC;IACd;IAEA,SAAS,iBAAiB,IAAwC;QAChE,MAAM;YACF,OAAO;YACP,aAAa;QACjB;QACA,QAAQ,GAAG,CAAC;QACZ,aAAa,KAAK;IACpB;IAEA,MAAM,oBAAoB,OAAO,2HAAA,CAAA,aAAU,CAAC,KAAK,IAAI,CAAC,GAAG,2HAAA,CAAA,aAAU,CAAC,IAAI;IACxE,MAAM,yBAAyB,OAAO,AAAC,KAAK,YAAY,GAAG,kBAAkB,QAAQ,GAAI,MAAM;IAC/F,MAAM,oBAAoB,OAAO,AAAC,KAAK,cAAc,GAAG,kBAAkB,UAAU,GAAI,MAAM;IAE9F,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAAkD;;;;;;kCAChE,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;0BAGvC,8OAAC,gIAAA,CAAA,OAAI;;kCACD,8OAAC,gIAAA,CAAA,aAAU;;0CACP,8OAAC,gIAAA,CAAA,YAAS;gCAAC,WAAU;;kDACnB,8OAAC,oMAAA,CAAA,QAAK;;;;;oCAAG;;;;;;;0CAGX,8OAAC,gIAAA,CAAA,kBAAe;0CAAC;;;;;;;;;;;;kCAErB,8OAAC,gIAAA,CAAA,cAAW;wBAAC,WAAU;;4BACpB,4BACG,8OAAC,oIAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;uCACpB,qBACA,8OAAC;gCAAI,WAAU;;kDACX,8OAAC;;0DACG,8OAAC;gDAAE,WAAU;;oDAAgB;kEACA,8OAAC;wDAAK,WAAU;kEAA2B,KAAK,IAAI;;;;;;oDAAQ;;;;;;;0DAEzF,8OAAC;gDAAE,WAAU;;oDAAgC;kEACjC,8OAAC;wDAAK,WAAU;kEAAc,KAAK,kBAAkB,IAAI;;;;;;;;;;;;;;;;;;kDAGxE,8OAAC;wCAAK,QAAQ,kJAAA,CAAA,4BAAyB;kDACpC,cAAA,8OAAC,kIAAA,CAAA,SAAM;4CAAC,MAAK;4CAAS,SAAQ;;gDAAU;8DAEpC,8OAAC,sNAAA,CAAA,eAAY;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;qDAKnC,8OAAC;gCAAE,WAAU;0CAAwB;;;;;;4BAGzC,4BACG,8OAAC;gCAAI,WAAU;;kDACX,8OAAC,oIAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;kDACpB,8OAAC,oIAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;;;;;;uCAExB,sBACA,8OAAC;gCAAI,WAAU;;kDACX,8OAAC;;0DACG,8OAAC;gDAAI,WAAU;;kEACX,8OAAC;wDAAE,WAAU;;0EAA8C,8OAAC,8MAAA,CAAA,WAAQ;;;;;4DAAG;;;;;;;kEACvE,8OAAC;wDAAE,WAAU;;4DAAiC,KAAK,YAAY;4DAAC;4DAAI,kBAAkB,QAAQ,KAAK,WAAW,cAAc,kBAAkB,QAAQ;;;;;;;;;;;;;0DAE1J,8OAAC,oIAAA,CAAA,WAAQ;gDAAC,OAAO;;;;;;;;;;;;kDAEpB,8OAAC;;0DACE,8OAAC;gDAAI,WAAU;;kEACX,8OAAC;wDAAE,WAAU;;0EAA8C,8OAAC,0MAAA,CAAA,WAAQ;;;;;4DAAG;;;;;;;kEACvE,8OAAC;wDAAE,WAAU;;4DAAiC,KAAK,cAAc;4DAAC;4DAAI,kBAAkB,UAAU,KAAK,WAAW,cAAc,kBAAkB,UAAU;;;;;;;;;;;;;0DAEhK,8OAAC,oIAAA,CAAA,WAAQ;gDAAC,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQnC,8OAAC,gIAAA,CAAA,OAAI;;kCACD,8OAAC,gIAAA,CAAA,aAAU;;0CACP,8OAAC,gIAAA,CAAA,YAAS;0CAAC;;;;;;0CACX,8OAAC,gIAAA,CAAA,kBAAe;0CAAC;;;;;;;;;;;;kCAErB,8OAAC,gIAAA,CAAA,cAAW;kCACV,cAAA,8OAAC,gIAAA,CAAA,OAAI;4BAAE,GAAG,WAAW;sCACjB,cAAA,8OAAC;gCAAK,UAAU,YAAY,YAAY,CAAC;gCAAkB,WAAU;;kDACrE,8OAAC,gIAAA,CAAA,YAAS;wCACN,SAAS,YAAY,OAAO;wCAC5B,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAClB,8OAAC,gIAAA,CAAA,WAAQ;;kEACL,8OAAC,gIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,gIAAA,CAAA,cAAW;kEACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;4DAAC,aAAY;4DAAa,GAAG,KAAK;;;;;;;;;;;kEAExC,8OAAC,gIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;kDAIpB,8OAAC,gIAAA,CAAA,YAAS;wCACN,SAAS,YAAY,OAAO;wCAC5B,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAClB,8OAAC,gIAAA,CAAA,WAAQ;;kEACL,8OAAC,gIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,gIAAA,CAAA,cAAW;kEACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;4DAAC,MAAK;4DAAQ,aAAY;4DAAkB,GAAG,KAAK;4DAAE,QAAQ;;;;;;;;;;;kEAEpE,8OAAC,gIAAA,CAAA,kBAAe;kEAAC;;;;;;kEAGjB,8OAAC,gIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;kDAIpB,8OAAC,kIAAA,CAAA,SAAM;wCAAC,MAAK;kDAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAMhC,8OAAC,gIAAA,CAAA,OAAI;;kCACD,8OAAC,gIAAA,CAAA,aAAU;;0CACP,8OAAC,gIAAA,CAAA,YAAS;0CAAC;;;;;;0CACX,8OAAC,gIAAA,CAAA,kBAAe;0CAAC;;;;;;;;;;;;kCAErB,8OAAC,gIAAA,CAAA,cAAW;kCACZ,cAAA,8OAAC,gIAAA,CAAA,OAAI;4BAAE,GAAG,YAAY;sCACpB,cAAA,8OAAC;gCAAK,UAAU,aAAa,YAAY,CAAC;gCAAmB,WAAU;;kDACnE,8OAAC,gIAAA,CAAA,YAAS;wCACN,SAAS,aAAa,OAAO;wCAC7B,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAClB,8OAAC,gIAAA,CAAA,WAAQ;;kEACL,8OAAC,gIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,gIAAA,CAAA,cAAW;kEACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;4DAAC,MAAK;4DAAY,GAAG,KAAK;;;;;;;;;;;kEAEhC,8OAAC,gIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;kDAIpB,8OAAC,gIAAA,CAAA,YAAS;wCACN,SAAS,aAAa,OAAO;wCAC7B,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAClB,8OAAC,gIAAA,CAAA,WAAQ;;kEACL,8OAAC,gIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,gIAAA,CAAA,cAAW;kEACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;4DAAC,MAAK;4DAAY,GAAG,KAAK;;;;;;;;;;;kEAEhC,8OAAC,gIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;kDAInB,8OAAC,gIAAA,CAAA,YAAS;wCACP,SAAS,aAAa,OAAO;wCAC7B,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAClB,8OAAC,gIAAA,CAAA,WAAQ;;kEACL,8OAAC,gIAAA,CAAA,YAAS;kEAAC;;;;;;kEACX,8OAAC,gIAAA,CAAA,cAAW;kEACZ,cAAA,8OAAC,iIAAA,CAAA,QAAK;4DAAC,MAAK;4DAAY,GAAG,KAAK;;;;;;;;;;;kEAEhC,8OAAC,gIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;kDAIpB,8OAAC,kIAAA,CAAA,SAAM;wCAAC,MAAK;kDAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQtC","debugId":null}}]
}