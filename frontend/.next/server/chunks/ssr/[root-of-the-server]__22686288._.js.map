{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { planLimits } from '@/lib/subscriptions';\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n});\n\nconst signupSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(8, 'Password must be at least 8 characters.'),\n    confirmPassword: z.string()\n}).refine(data => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n});\n\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  const sessionToken = cookies().get('session')?.value;\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(sessionToken && { 'Authorization': `Bearer ${sessionToken}` }),\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      // For 403 Forbidden, we want to show a specific message from the API\n      if (res.status === 403) {\n          throw new Error(errorBody.message || 'You do not have permission to perform this action. Please upgrade your plan.');\n      }\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call a /login API endpoint\n  // that validates hashed passwords.\n  if (password === 'password') { // Simplified check for any known user\n    // For this demo, we use the user's email as their session \"token\".\n    // This allows the backend to identify the user for each request.\n    cookies().set('session', email, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function signupAction(data: z.infer<typeof signupSchema>) {\n    const parsedData = signupSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\" }\n    }\n    const { email, password } = parsedData.data;\n\n    try {\n        await apiFetch('/users/signup', {\n            method: 'POST',\n            body: JSON.stringify({ email, password }),\n        });\n        \n        // Automatically log in the user after successful sign up\n        cookies().set('session', email, {\n            httpOnly: true,\n            secure: process.env.NODE_ENV === 'production',\n            path: '/',\n        });\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'An unknown error occurred during sign up.' };\n    }\n}\n\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- User Actions ---\nexport async function getUserAction() {\n  try {\n    const user = await apiFetch('/users/me');\n    return { success: true, data: user };\n  } catch (error) {\n    return { success: false, error: 'User not found.' };\n  }\n}\n\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    // The backend will now check the user's plan and invoice count before creating.\n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    revalidatePath('/dashboard/settings'); // To update usage display\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Subscription Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\nexport async function createCheckoutSessionAction(priceId: string) {\n    try {\n        const result = await apiFetch('/subscriptions/create-checkout-session', {\n            method: 'POST',\n            body: JSON.stringify({ priceId }),\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create checkout session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create checkout session.' };\n    }\n}\n\nexport async function createPortalSessionAction() {\n    try {\n        const result = await apiFetch('/subscriptions/create-portal-session', {\n            method: 'POST'\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create portal session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create portal session.' };\n    }\n}\n\n\n// --- AI Actions ---\n\nasync function checkAiUsageLimit() {\n    const userResult = await getUserAction();\n    if (!userResult.success) {\n        throw new Error('Could not identify user. Please log in again.');\n    }\n    const user = userResult.data;\n    const limits = planLimits[user.plan as keyof typeof planLimits] || planLimits.free;\n\n    if (user.aiRequestCount >= limits.aiRequests) {\n        throw new Error(`You have reached your monthly limit of ${limits.aiRequests} AI requests. Please upgrade your plan.`);\n    }\n}\n\nasync function incrementAiUsage() {\n    try {\n        await apiFetch('/users/me/increment-ai', { method: 'PUT' });\n        revalidatePath('/dashboard/settings');\n    } catch (error) {\n        console.error(\"Failed to increment AI usage count:\", error);\n        // We don't throw here to not fail the main operation, but we log the error.\n    }\n}\n\nexport async function getFinancialInsightsAction() {\n  try {\n    await checkAiUsageLimit();\n\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    });\n\n    await incrementAiUsage();\n    return { success: true, data: insights };\n  } catch (error) {\n    console.error('Error generating financial insights:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate financial insights.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    await checkAiUsageLimit();\n    const result = await generateInvoiceFromText(text);\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate invoice from text.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    await checkAiUsageLimit();\n    const result = await calculateTax({ address, subtotal });\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    const message = error instanceof Error ? error.message : 'Failed to calculate tax with AI.';\n    return { success: false, error: message };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgEsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///D:/Dev/FinSuite/frontend/src/app/login/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { loginAction } from '@/app/actions'\nimport { Button } from '@/components/ui/button'\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Landmark } from 'lucide-react'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport Link from 'next/link'\n\nexport default function LoginPage() {\n  const router = useRouter()\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    setLoading(true)\n    setError(null)\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email') as string\n    const password = formData.get('password') as string\n    \n    if (!email || !password) {\n        setError(\"Email and password are required.\");\n        setLoading(false);\n        return;\n    }\n\n    const result = await loginAction({ email, password })\n\n    if (result.success) {\n      router.push('/dashboard')\n    } else {\n      setError(result.error ?? 'An unexpected error occurred.')\n      setLoading(false)\n    }\n  }\n\n  return (\n    <main className=\"flex items-center justify-center min-h-screen bg-background\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center items-center gap-2 mb-4\">\n            <Landmark className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-3xl font-headline font-bold\">FinSuite</h1>\n          </div>\n          <CardTitle className=\"text-2xl\">Login</CardTitle>\n          <CardDescription>Enter your email below to login to your account.</CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"grid gap-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertTitle>Login Failed</AlertTitle>\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" name=\"email\" type=\"email\" placeholder=\"m@example.com\" required />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input id=\"password\" name=\"password\" type=\"password\" required />\n            </div>\n            <p className=\"px-1 text-xs text-muted-foreground\">\n              Demo user: <code className=\"font-mono font-bold\">user@example.com</code> / <code className=\"font-mono font-bold\">password</code>.\n            </p>\n          </CardContent>\n          <CardFooter className=\"flex-col items-stretch gap-4\">\n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading ? 'Signing in...' : 'Sign in'}\n            </Button>\n            <div className=\"text-center text-sm\">\n                Don&apos;t have an account?{' '}\n                <Button variant=\"link\" asChild className=\"p-0 h-auto\">\n                    <Link href=\"/signup\">Sign up</Link>\n                </Button>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </main>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;;;;AAoBe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,eAAe,OAAO;QAC1B,MAAM,cAAc;QACpB,WAAW;QACX,SAAS;QACT,MAAM,WAAW,IAAI,SAAS,MAAM,aAAa;QACjD,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,SAAS;YACT,WAAW;YACX;QACJ;QAEA,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,cAAW,AAAD,EAAE;YAAE;YAAO;QAAS;QAEnD,IAAI,OAAO,OAAO,EAAE;YAClB,OAAO,IAAI,CAAC;QACd,OAAO;YACL,SAAS,OAAO,KAAK,IAAI;YACzB,WAAW;QACb;IACF;IAEA,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC,gIAAA,CAAA,OAAI;YAAC,WAAU;;8BACd,8OAAC,gIAAA,CAAA,aAAU;oBAAC,WAAU;;sCACpB,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,0MAAA,CAAA,WAAQ;oCAAC,WAAU;;;;;;8CACpB,8OAAC;oCAAG,WAAU;8CAAmC;;;;;;;;;;;;sCAEnD,8OAAC,gIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAW;;;;;;sCAChC,8OAAC,gIAAA,CAAA,kBAAe;sCAAC;;;;;;;;;;;;8BAEnB,8OAAC;oBAAK,UAAU;;sCACd,8OAAC,gIAAA,CAAA,cAAW;4BAAC,WAAU;;gCACpB,uBACC,8OAAC,iIAAA,CAAA,QAAK;oCAAC,SAAQ;;sDACb,8OAAC,iIAAA,CAAA,aAAU;sDAAC;;;;;;sDACZ,8OAAC,iIAAA,CAAA,mBAAgB;sDAAE;;;;;;;;;;;;8CAGvB,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,iIAAA,CAAA,QAAK;4CAAC,SAAQ;sDAAQ;;;;;;sDACvB,8OAAC,iIAAA,CAAA,QAAK;4CAAC,IAAG;4CAAQ,MAAK;4CAAQ,MAAK;4CAAQ,aAAY;4CAAgB,QAAQ;;;;;;;;;;;;8CAElF,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,iIAAA,CAAA,QAAK;4CAAC,SAAQ;sDAAW;;;;;;sDAC1B,8OAAC,iIAAA,CAAA,QAAK;4CAAC,IAAG;4CAAW,MAAK;4CAAW,MAAK;4CAAW,QAAQ;;;;;;;;;;;;8CAE/D,8OAAC;oCAAE,WAAU;;wCAAqC;sDACrC,8OAAC;4CAAK,WAAU;sDAAsB;;;;;;wCAAuB;sDAAG,8OAAC;4CAAK,WAAU;sDAAsB;;;;;;wCAAe;;;;;;;;;;;;;sCAGpI,8OAAC,gIAAA,CAAA,aAAU;4BAAC,WAAU;;8CACpB,8OAAC,kIAAA,CAAA,SAAM;oCAAC,MAAK;oCAAS,WAAU;oCAAS,UAAU;8CAChD,UAAU,kBAAkB;;;;;;8CAE/B,8OAAC;oCAAI,WAAU;;wCAAsB;wCACL;sDAC5B,8OAAC,kIAAA,CAAA,SAAM;4CAAC,SAAQ;4CAAO,OAAO;4CAAC,WAAU;sDACrC,cAAA,8OAAC,4JAAA,CAAA,UAAI;gDAAC,MAAK;0DAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQzC","debugId":null}}]
}