{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-financial-insights.ts"],"sourcesContent":["// use server'\n'use server';\n\n/**\n * @fileOverview AI-driven financial insights flow.\n *\n * - generateFinancialInsights - A function that generates financial insights.\n * - GenerateFinancialInsightsInput - The input type for the generateFinancialInsights function.\n * - GenerateFinancialInsightsOutput - The return type for the generateFinancialInsights function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateFinancialInsightsInputSchema = z.object({\n  invoiceData: z.string().describe('The invoice data in JSON format.'),\n  paymentData: z.string().describe('The payment data in JSON format.'),\n});\n\nexport type GenerateFinancialInsightsInput = z.infer<\n  typeof GenerateFinancialInsightsInputSchema\n>;\n\nconst GenerateFinancialInsightsOutputSchema = z.object({\n  insights: z.string().describe('Insights about the business\\s financial health.'),\n  cashFlowPrediction: z\n    .string()\n    .describe('Prediction of future cash flow.'),\n  financialProjections: z\n    .string()\n    .describe('Informed financial projections.'),\n});\n\nexport type GenerateFinancialInsightsOutput = z.infer<\n  typeof GenerateFinancialInsightsOutputSchema\n>;\n\nexport async function generateFinancialInsights(\n  input: GenerateFinancialInsightsInput\n): Promise<GenerateFinancialInsightsOutput> {\n  return generateFinancialInsightsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateFinancialInsightsPrompt',\n  input: {schema: GenerateFinancialInsightsInputSchema},\n  output: {schema: GenerateFinancialInsightsOutputSchema},\n  prompt: `You are a financial analyst providing insights, predictions, and projections based on invoice and payment data.\n\n  Analyze the following invoice and payment data to generate insights about the business's financial health, predict future cash flow, and make informed financial projections.\n\n  Invoice Data: {{{invoiceData}}}\n  Payment Data: {{{paymentData}}}\n\n  Provide your analysis in a structured format.\n`,\n});\n\nconst generateFinancialInsightsFlow = ai.defineFlow(\n  {\n    name: 'generateFinancialInsightsFlow',\n    inputSchema: GenerateFinancialInsightsInputSchema,\n    outputSchema: GenerateFinancialInsightsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;AAGd;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAMA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CAAC;IACZ,sBAAsB,uIAAA,CAAA,IAAC,CACpB,MAAM,GACN,QAAQ,CAAC;AACd;AAMO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;AAQX,CAAC;AACD;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA9BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/types.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const clientSchema = z.object({\n  name: z.string().min(1, 'Client name is required'),\n  email: z.string().email('Invalid email address'),\n  address: z.string().min(1, 'Client address is required'),\n});\n\nexport const lineItemSchema = z.object({\n  description: z.string().min(1, 'Description is required'),\n  quantity: z.number().min(0.01, 'Quantity must be positive'),\n  rate: z.number().min(0, 'Rate must be non-negative'),\n});\n\nexport const invoiceSchema = z.object({\n  id: z.string().optional(),\n  invoiceNumber: z.string().min(1, 'Invoice number is required'),\n  client: clientSchema,\n  invoiceDate: z.date(),\n  dueDate: z.date(),\n  lineItems: z.array(lineItemSchema).min(1, 'At least one line item is required'),\n  total: z.number().optional(), // Will be calculated\n  currency: z.enum(['USD', 'EUR', 'GBP']),\n  status: z.enum(['paid', 'pending', 'overdue']),\n  signature: z.string(),\n  notes: z.string().optional(),\n});\n\nexport type Client = z.infer<typeof clientSchema>;\nexport type ClientWithId = Client & { id: string };\nexport type LineItem = z.infer<typeof lineItemSchema>;\nexport type Invoice = z.infer<typeof invoiceSchema> & { id: string, total: number };\n\nexport const paymentSchema = z.object({\n    id: z.string(),\n    invoiceId: z.string(),\n    amount: z.number(),\n    date: z.date(),\n    method: z.string(),\n});\n\nexport type Payment = z.infer<typeof paymentSchema>;\n"],"names":[],"mappings":";;;;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC7B;AAEO,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IAC/B,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC1B;AAEO,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACjC,QAAQ;IACR,aAAa,oIAAA,CAAA,IAAC,CAAC,IAAI;IACnB,SAAS,oIAAA,CAAA,IAAC,CAAC,IAAI;IACf,WAAW,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,GAAG;IAC1C,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,UAAU,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAO;KAAM;IACtC,QAAQ,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAW;KAAU;IAC7C,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAOO,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;IAChB,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI;IACZ,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;AACpB","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const total = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const newInvoiceData = { ...parsedData.data, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const total = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const updatedInvoiceData = { ...parsedData.data, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {loginAction as '40571a529812a23dab5eb5838e6a3802dc02b5abc6'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 835, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 849, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}