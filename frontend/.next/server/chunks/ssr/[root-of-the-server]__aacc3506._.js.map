{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-financial-insights.ts"],"sourcesContent":["\n// use server'\n'use server';\n\n/**\n * @fileOverview AI-driven financial insights flow.\n *\n * - generateFinancialInsights - A function that generates financial insights.\n * - GenerateFinancialInsightsInput - The input type for the generateFinancialInsights function.\n * - GenerateFinancialInsightsOutput - The return type for the generateFinancialInsights function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateFinancialInsightsInputSchema = z.object({\n  invoiceData: z.string().describe('The invoice data in JSON format.'),\n  paymentData: z.string().describe('The payment data in JSON format.'),\n});\n\nexport type GenerateFinancialInsightsInput = z.infer<\n  typeof GenerateFinancialInsightsInputSchema\n>;\n\nconst GenerateFinancialInsightsOutputSchema = z.object({\n  insights: z.string().describe('A summary of key financial health insights based on the data. Should be a short paragraph.'),\n  cashFlowAnalysis: z\n    .string()\n    .describe('An analysis of historical and current cash flow. Should be a short paragraph.'),\n  revenueForecasting: z\n    .string()\n    .describe('A simple revenue forecast for the next quarter based on trends. Should be a short paragraph.'),\n});\n\nexport type GenerateFinancialInsightsOutput = z.infer<\n  typeof GenerateFinancialInsightsOutputSchema\n>;\n\nexport async function generateFinancialInsights(\n  input: GenerateFinancialInsightsInput\n): Promise<GenerateFinancialInsightsOutput> {\n  return generateFinancialInsightsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateFinancialInsightsPrompt',\n  input: {schema: GenerateFinancialInsightsInputSchema},\n  output: {schema: GenerateFinancialInsightsOutputSchema},\n  prompt: `You are an expert financial analyst for a small business. Your task is to analyze invoice and payment data to provide actionable insights.\n\n  Based on the JSON data provided below, generate:\n  1.  A summary of the business's current financial health.\n  2.  An analysis of the cash flow.\n  3.  A simple revenue forecast for the upcoming quarter.\n\n  Keep your analysis concise and easy to understand for a non-expert.\n\n  Invoice Data:\n  {{{invoiceData}}}\n\n  Payment Data:\n  {{{paymentData}}}\n\n  Provide your response in the requested JSON format.\n`,\n});\n\nconst generateFinancialInsightsFlow = ai.defineFlow(\n  {\n    name: 'generateFinancialInsightsFlow',\n    inputSchema: GenerateFinancialInsightsInputSchema,\n    outputSchema: GenerateFinancialInsightsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AACA,cAAc;;;;;;AAGd;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAMA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;IACZ,oBAAoB,uIAAA,CAAA,IAAC,CAClB,MAAM,GACN,QAAQ,CAAC;AACd;AAMO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;;;;;;;;;;;;AAgBX,CAAC;AACD;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/types.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const clientSchema = z.object({\n  name: z.string().min(1, 'Client name is required'),\n  email: z.string().email('Invalid email address'),\n  address: z.string().min(1, 'Client address is required'),\n});\n\nconst noteSchema = z.object({\n  content: z.string(),\n  date: z.string(), // from API it's a string\n  _id: z.string().optional(),\n});\n\nexport const lineItemSchema = z.object({\n  description: z.string().min(1, 'Description is required'),\n  quantity: z.number().min(0.01, 'Quantity must be positive'),\n  rate: z.number().min(0, 'Rate must be non-negative'),\n});\n\nexport const invoiceSchema = z.object({\n  id: z.string().optional(),\n  invoiceNumber: z.string().min(1, 'Invoice number is required'),\n  client: clientSchema,\n  invoiceDate: z.date(),\n  dueDate: z.date(),\n  lineItems: z.array(lineItemSchema).min(1, 'At least one line item is required'),\n  subtotal: z.number().optional(), // Calculated on submit\n  tax: z.number().optional().default(0),\n  taxRate: z.number().optional().default(0),\n  total: z.number().optional(), // Calculated on submit\n  currency: z.enum(['USD', 'EUR', 'GBP']),\n  status: z.enum(['paid', 'pending', 'overdue']),\n  signature: z.string(),\n  notes: z.string().optional(),\n});\n\nexport type Client = z.infer<typeof clientSchema>;\nexport type Note = z.infer<typeof noteSchema>;\nexport type ClientWithId = Client & { id: string; notes?: Note[] };\nexport type LineItem = z.infer<typeof lineItemSchema>;\nexport type Invoice = z.infer<typeof invoiceSchema> & { \n  id: string, \n  subtotal: number,\n  tax: number,\n  taxRate: number,\n  total: number \n};\n\nconst invoiceForPaymentSchema = z.object({\n    id: z.string(),\n    invoiceNumber: z.string(),\n    client: clientSchema.pick({ name: true })\n});\n\nexport const paymentSchema = z.object({\n    id: z.string(),\n    invoiceId: invoiceForPaymentSchema,\n    amount: z.number(),\n    date: z.string(), // Comes as a string from API\n    method: z.string(),\n});\n\nexport type Payment = z.infer<typeof paymentSchema>;\n\nexport const aiGeneratedInvoiceSchema = z.object({\n    client: clientSchema,\n    lineItems: z.array(lineItemSchema)\n});\nexport type AIGeneratedInvoiceData = z.infer<typeof aiGeneratedInvoiceSchema>;\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEO,MAAM,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC7B;AAEA,MAAM,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IACd,KAAK,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC1B;AAEO,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IAC/B,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC1B;AAEO,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACjC,QAAQ;IACR,aAAa,oIAAA,CAAA,IAAC,CAAC,IAAI;IACnB,SAAS,oIAAA,CAAA,IAAC,CAAC,IAAI;IACf,WAAW,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,GAAG;IAC1C,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,KAAK,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;IACnC,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;IACvC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,UAAU,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAO;KAAM;IACtC,QAAQ,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAW;KAAU;IAC7C,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAcA,MAAM,0BAA0B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,eAAe,oIAAA,CAAA,IAAC,CAAC,MAAM;IACvB,QAAQ,aAAa,IAAI,CAAC;QAAE,MAAM;IAAK;AAC3C;AAEO,MAAM,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,IAAI,oIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,WAAW;IACX,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;IAChB,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IACd,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM;AACpB;AAIO,MAAM,2BAA2B,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,QAAQ;IACR,WAAW,oIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACvB","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-invoice-from-text.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow to generate structured invoice data from a text description.\n * \n * - generateInvoiceFromText - A function that handles parsing text into invoice data.\n * - GenerateInvoiceFromTextInput - The input type for the function.\n * - GenerateInvoiceFromTextOutput - The return type for the function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { clientSchema, lineItemSchema } from '@/lib/types';\n\nconst GenerateInvoiceFromTextInputSchema = z.string();\nexport type GenerateInvoiceFromTextInput = z.infer<typeof GenerateInvoiceFromTextInputSchema>;\n\nconst GenerateInvoiceFromTextOutputSchema = z.object({\n  client: clientSchema.describe(\"The client's information extracted from the text.\"),\n  lineItems: z.array(lineItemSchema).describe(\"An array of line items extracted from the text.\"),\n});\nexport type GenerateInvoiceFromTextOutput = z.infer<typeof GenerateInvoiceFromTextOutputSchema>;\n\n\nexport async function generateInvoiceFromText(input: GenerateInvoiceFromTextInput): Promise<GenerateInvoiceFromTextOutput> {\n  return generateInvoiceFromTextFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n    name: 'generateInvoiceFromTextPrompt',\n    input: { schema: GenerateInvoiceFromTextInputSchema },\n    output: { schema: GenerateInvoiceFromTextOutputSchema },\n    prompt: `You are an intelligent assistant that helps create invoices. Your task is to parse the user's text description of an invoice and convert it into a structured JSON object.\n\n    The user will provide a natural language description. You need to extract the client's name, email, and address, as well as all the line items with their description, quantity, and rate.\n\n    If any information is missing, make reasonable assumptions. For example, if an address is not provided, you can use a placeholder like 'N/A'. If quantity isn't specified, assume 1.\n\n    User's invoice description:\n    \"{{prompt}}\"\n    `,\n});\n\nconst generateInvoiceFromTextFlow = ai.defineFlow(\n  {\n    name: 'generateInvoiceFromTextFlow',\n    inputSchema: GenerateInvoiceFromTextInputSchema,\n    outputSchema: GenerateInvoiceFromTextOutputSchema,\n  },\n  async input => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM;AAGnD,MAAM,sCAAsC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,QAAQ,mHAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,mHAAA,CAAA,iBAAc,EAAE,QAAQ,CAAC;AAC9C;AAIO,eAAe,wBAAwB,KAAmC;IAC/E,OAAO,4BAA4B;AACrC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAmC;IACpD,QAAQ;QAAE,QAAQ;IAAoC;IACtD,QAAQ,CAAC;;;;;;;;IAQT,CAAC;AACL;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/calculate-tax.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow to calculate sales tax based on location.\n * \n * - calculateTax - A function that handles the tax calculation.\n * - CalculateTaxInput - The input type for the function.\n * - CalculateTaxOutput - The return type for the function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst CalculateTaxInputSchema = z.object({\n  address: z.string().describe(\"The client's full address.\"),\n  subtotal: z.number().describe('The subtotal of the invoice before tax.'),\n});\nexport type CalculateTaxInput = z.infer<typeof CalculateTaxInputSchema>;\n\nconst CalculateTaxOutputSchema = z.object({\n  taxRate: z.number().describe('The calculated tax rate as a percentage (e.g., 8.25 for 8.25%).'),\n  taxAmount: z.number().describe('The calculated tax amount.'),\n});\nexport type CalculateTaxOutput = z.infer<typeof CalculateTaxOutputSchema>;\n\n\nexport async function calculateTax(input: CalculateTaxInput): Promise<CalculateTaxOutput> {\n  return calculateTaxFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n    name: 'calculateTaxPrompt',\n    input: { schema: CalculateTaxInputSchema },\n    output: { schema: CalculateTaxOutputSchema },\n    prompt: `You are a tax calculation AI. Your task is to determine the correct sales tax rate based on a client's address and calculate the tax amount based on an invoice subtotal.\n\n    Analyze the address to determine the region. Use the following heuristic for tax rates:\n    - If the address is in California (CA), use 9.5%.\n    - If the address is in New York (NY), use 8.875%.\n    - If the address is in Texas (TX), use 8.25%.\n    - If the address is in the United Kingdom, use 20%.\n    - For any other location, use a default rate of 7%.\n\n    Client Address: {{address}}\n    Invoice Subtotal: {{subtotal}}\n\n    Calculate the tax amount and return the rate used and the final tax amount.\n    `,\n});\n\nconst calculateTaxFlow = ai.defineFlow(\n  {\n    name: 'calculateTaxFlow',\n    inputSchema: CalculateTaxInputSchema,\n    outputSchema: CalculateTaxOutputSchema,\n  },\n  async input => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAIO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAwB;IACzC,QAAQ;QAAE,QAAQ;IAAyB;IAC3C,QAAQ,CAAC;;;;;;;;;;;;;IAaT,CAAC;AACL;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 515, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/subscriptions.ts"],"sourcesContent":["\nexport const subscriptionPlans = [\n    {\n        name: 'Free',\n        description: 'For individuals and small teams getting started.',\n        price: '$0',\n        priceId: '',\n        features: [\n            '5 invoices per month',\n            '5 AI requests per month',\n            'Basic reporting',\n            'Email support'\n        ]\n    },\n    {\n        name: 'Pro',\n        description: 'For growing businesses that need more power.',\n        price: '$25',\n        priceId: process.env.NEXT_PUBLIC_STRIPE_PRO_PLAN_ID || 'price_pro_placeholder',\n        isPopular: true,\n        features: [\n            '50 invoices per month',\n            '100 AI requests per month',\n            'Advanced reporting and analytics',\n            'Priority email support'\n        ]\n    },\n    {\n        name: 'Advanced',\n        description: 'For large teams and enterprises.',\n        price: '$50',\n        priceId: process.env.NEXT_PUBLIC_STRIPE_ADVANCED_PLAN_ID || 'price_advanced_placeholder',\n        features: [\n            'Unlimited invoices',\n            'Unlimited AI requests',\n            'Custom integrations',\n            'Dedicated phone support'\n        ]\n    }\n];\n\nexport const planLimits = {\n  free: { invoices: 5, aiRequests: 5 },\n  pro: { invoices: 50, aiRequests: 100 },\n  advanced: { invoices: Infinity, aiRequests: Infinity },\n};\n"],"names":[],"mappings":";;;;AACO,MAAM,oBAAoB;IAC7B;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS;QACT,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;IACA;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS,QAAQ,GAAG,CAAC,8BAA8B,IAAI;QACvD,WAAW;QACX,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;IACA;QACI,MAAM;QACN,aAAa;QACb,OAAO;QACP,SAAS,QAAQ,GAAG,CAAC,mCAAmC,IAAI;QAC5D,UAAU;YACN;YACA;YACA;YACA;SACH;IACL;CACH;AAEM,MAAM,aAAa;IACxB,MAAM;QAAE,UAAU;QAAG,YAAY;IAAE;IACnC,KAAK;QAAE,UAAU;QAAI,YAAY;IAAI;IACrC,UAAU;QAAE,UAAU;QAAU,YAAY;IAAS;AACvD","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { planLimits } from '@/lib/subscriptions';\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n});\n\nconst signupSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(8, 'Password must be at least 8 characters.'),\n    confirmPassword: z.string()\n}).refine(data => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n});\n\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  const sessionToken = cookies().get('session')?.value;\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(sessionToken && { 'Authorization': `Bearer ${sessionToken}` }),\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      // For 403 Forbidden, we want to show a specific message from the API\n      if (res.status === 403) {\n          throw new Error(errorBody.message || 'You do not have permission to perform this action. Please upgrade your plan.');\n      }\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call a /login API endpoint\n  // that validates hashed passwords.\n  if (password === 'password') { // Simplified check for any known user\n    // For this demo, we use the user's email as their session \"token\".\n    // This allows the backend to identify the user for each request.\n    cookies().set('session', email, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function signupAction(data: z.infer<typeof signupSchema>) {\n    const parsedData = signupSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\" }\n    }\n    const { email, password } = parsedData.data;\n\n    try {\n        await apiFetch('/users/signup', {\n            method: 'POST',\n            body: JSON.stringify({ email, password }),\n        });\n        \n        // Automatically log in the user after successful sign up\n        cookies().set('session', email, {\n            httpOnly: true,\n            secure: process.env.NODE_ENV === 'production',\n            path: '/',\n        });\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'An unknown error occurred during sign up.' };\n    }\n}\n\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- User Actions ---\nexport async function getUserAction() {\n  try {\n    const user = await apiFetch('/users/me');\n    return { success: true, data: user };\n  } catch (error) {\n    return { success: false, error: 'User not found.' };\n  }\n}\n\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    // The backend will now check the user's plan and invoice count before creating.\n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    revalidatePath('/dashboard/settings'); // To update usage display\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Subscription Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\nexport async function createCheckoutSessionAction(priceId: string) {\n    try {\n        const result = await apiFetch('/subscriptions/create-checkout-session', {\n            method: 'POST',\n            body: JSON.stringify({ priceId }),\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create checkout session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create checkout session.' };\n    }\n}\n\nexport async function createPortalSessionAction() {\n    try {\n        const result = await apiFetch('/subscriptions/create-portal-session', {\n            method: 'POST'\n        });\n        if (result.url) {\n            redirect(result.url);\n        } else {\n            return { success: false, error: 'Could not create portal session.' };\n        }\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create portal session.' };\n    }\n}\n\n\n// --- AI Actions ---\n\nasync function checkAiUsageLimit() {\n    const userResult = await getUserAction();\n    if (!userResult.success) {\n        throw new Error('Could not identify user. Please log in again.');\n    }\n    const user = userResult.data;\n    const limits = planLimits[user.plan as keyof typeof planLimits] || planLimits.free;\n\n    if (user.aiRequestCount >= limits.aiRequests) {\n        throw new Error(`You have reached your monthly limit of ${limits.aiRequests} AI requests. Please upgrade your plan.`);\n    }\n}\n\nasync function incrementAiUsage() {\n    try {\n        await apiFetch('/users/me/increment-ai', { method: 'PUT' });\n        revalidatePath('/dashboard/settings');\n    } catch (error) {\n        console.error(\"Failed to increment AI usage count:\", error);\n        // We don't throw here to not fail the main operation, but we log the error.\n    }\n}\n\nexport async function getFinancialInsightsAction() {\n  try {\n    await checkAiUsageLimit();\n\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    });\n\n    await incrementAiUsage();\n    return { success: true, data: insights };\n  } catch (error) {\n    console.error('Error generating financial insights:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate financial insights.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    await checkAiUsageLimit();\n    const result = await generateInvoiceFromText(text);\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    const message = error instanceof Error ? error.message : 'Failed to generate invoice from text.';\n    return { success: false, error: message };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    await checkAiUsageLimit();\n    const result = await calculateTax({ address, subtotal });\n    await incrementAiUsage();\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    const message = error instanceof Error ? error.message : 'Failed to calculate tax with AI.';\n    return { success: false, error: message };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1293, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/signup/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signupAction as '4087be2898354d254d7b06b09270c15d25755545f3'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1345, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/signup/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/signup/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/signup/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 1359, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/signup/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/signup/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/signup/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 1373, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}