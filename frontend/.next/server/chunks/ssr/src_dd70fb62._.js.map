{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAwSsB,6BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/payments/payment-form-content.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { confirmStripePaymentAction } from '@/app/actions';\nimport { Loader2 } from 'lucide-react';\nimport type { Invoice } from '@/lib/types';\nimport { cn } from '@/lib/utils';\n\ninterface PaymentFormContentProps {\n  invoice: Invoice;\n  onPaymentSuccess: (invoice: Invoice) => void;\n  onCancel: () => void;\n}\n\nconst cardElementOptions = {\n    style: {\n      base: {\n        color: 'hsl(var(--foreground))',\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: 'antialiased' as const,\n        fontSize: '16px',\n        '::placeholder': {\n          color: 'hsl(var(--muted-foreground))'\n        },\n      },\n      invalid: {\n        color: 'hsl(var(--destructive))',\n        iconColor: 'hsl(var(--destructive))'\n      }\n    }\n};\n\nexport default function PaymentFormContent({ invoice, onPaymentSuccess, onCancel }: PaymentFormContentProps) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoading(true);\n    setErrorMessage(null);\n\n    if (!stripe || !elements) {\n      setErrorMessage('Stripe has not loaded yet. Please try again in a moment.');\n      setLoading(false);\n      return;\n    }\n\n    const cardElement = elements.getElement(CardElement);\n\n    if (!cardElement) {\n      setErrorMessage('Card element not found. Please refresh and try again.');\n      setLoading(false);\n      return;\n    }\n\n    const { error: paymentMethodError, paymentMethod } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement,\n    });\n    \n    if (paymentMethodError) {\n        setErrorMessage(paymentMethodError.message || 'An unknown error occurred while creating payment method.');\n        setLoading(false);\n        return;\n    }\n    \n    const clientSecret = elements.getClientSecret();\n    if (!clientSecret) {\n        setErrorMessage('Client secret not found. Cannot proceed with payment.');\n        setLoading(false);\n        return;\n    }\n\n    const { error: confirmError, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: paymentMethod.id\n    });\n\n    if (confirmError) {\n      setErrorMessage(confirmError.message || 'Failed to process payment.');\n      setLoading(false);\n      return;\n    }\n\n    if (paymentIntent?.status === 'succeeded') {\n      const result = await confirmStripePaymentAction(invoice.id, paymentIntent.id);\n      \n      if (result.success && result.data) {\n        toast({\n          title: 'Payment Successful!',\n          description: `Invoice ${invoice.invoiceNumber} has been paid.`\n        });\n        onPaymentSuccess(result.data as Invoice);\n      } else {\n         toast({\n            variant: 'destructive',\n            title: 'Confirmation Error',\n            description: result.error || 'Payment was successful with Stripe, but failed to update on our server. Please contact support.'\n        });\n      }\n    } else {\n      setErrorMessage(`Payment status: ${paymentIntent?.status}. Please contact support.`);\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"p-4 border rounded-md bg-background\">\n        <CardElement options={cardElementOptions} />\n      </div>\n      {errorMessage && (\n        <div className=\"text-sm font-medium text-destructive\">{errorMessage}</div>\n      )}\n      <div className=\"flex justify-end gap-4 pt-4\">\n        <Button type=\"button\" variant=\"ghost\" onClick={onCancel} disabled={loading}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={!stripe || loading}>\n          {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Pay ${invoice.total.toFixed(2)}\n        </Button>\n      </div>\n    </form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IA4RsB,4BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/payments/payment-dialog.tsx"],"sourcesContent":["'use client';\n\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport PaymentFormContent from './payment-form-content';\nimport type { Invoice } from '@/lib/types';\nimport { createPaymentIntentAction } from '@/app/actions';\nimport { useEffect, useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\n// Make sure to set NEXT_PUBLIC_STRIPE_PUBLIC_KEY in your .env file\nconst stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY!);\n\ninterface PaymentDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  invoice: Invoice;\n  onPaymentSuccess: (invoice: Invoice) => void;\n}\n\nexport default function PaymentDialog({ isOpen, onOpenChange, invoice, onPaymentSuccess }: PaymentDialogProps) {\n  const [clientSecret, setClientSecret] = useState('');\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isOpen && invoice.total > 0) {\n      // Create PaymentIntent as soon as the dialog opens\n      createPaymentIntentAction(invoice.total, invoice.currency)\n        .then(result => {\n          if (result.success && result.clientSecret) {\n            setClientSecret(result.clientSecret);\n          } else {\n            console.error('Failed to create payment intent:', result.error);\n            toast({\n                variant: 'destructive',\n                title: 'Payment Error',\n                description: 'Could not initialize payment. Please try again.'\n            })\n            onOpenChange(false); // Close dialog on error\n          }\n        });\n    }\n  }, [isOpen, invoice.total, invoice.currency, onOpenChange, toast]);\n\n  const options = {\n    clientSecret,\n    appearance: {\n      theme: 'stripe' as const,\n    },\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Process Payment for Invoice {invoice.invoiceNumber}</DialogTitle>\n          <DialogDescription>\n            You are about to charge ${invoice.total.toFixed(2)} for this invoice. Enter the card details below.\n          </DialogDescription>\n        </DialogHeader>\n        {clientSecret ? (\n          <Elements options={options} stripe={stripePromise}>\n            <PaymentFormContent \n                invoice={invoice} \n                onPaymentSuccess={onPaymentSuccess}\n                onCancel={() => onOpenChange(false)}\n            />\n          </Elements>\n        ) : (\n            <div className=\"text-center p-8\">Loading payment form...</div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAfA;;;;;;;;;AAiBA,mEAAmE;AACnE,MAAM,gBAAgB,CAAA,GAAA,0JAAA,CAAA,aAAU,AAAD;AAShB,SAAS,cAAc,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,EAAE,gBAAgB,EAAsB;IAC3G,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,UAAU,QAAQ,KAAK,GAAG,GAAG;YAC/B,mDAAmD;YACnD,CAAA,GAAA,kJAAA,CAAA,4BAAyB,AAAD,EAAE,QAAQ,KAAK,EAAE,QAAQ,QAAQ,EACtD,IAAI,CAAC,CAAA;gBACJ,IAAI,OAAO,OAAO,IAAI,OAAO,YAAY,EAAE;oBACzC,gBAAgB,OAAO,YAAY;gBACrC,OAAO;oBACL,QAAQ,KAAK,CAAC,oCAAoC,OAAO,KAAK;oBAC9D,MAAM;wBACF,SAAS;wBACT,OAAO;wBACP,aAAa;oBACjB;oBACA,aAAa,QAAQ,wBAAwB;gBAC/C;YACF;QACJ;IACF,GAAG;QAAC;QAAQ,QAAQ,KAAK;QAAE,QAAQ,QAAQ;QAAE;QAAc;KAAM;IAEjE,MAAM,UAAU;QACd;QACA,YAAY;YACV,OAAO;QACT;IACF;IAEA,qBACE,8OAAC,kIAAA,CAAA,SAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,kIAAA,CAAA,gBAAa;;8BACZ,8OAAC,kIAAA,CAAA,eAAY;;sCACX,8OAAC,kIAAA,CAAA,cAAW;;gCAAC;gCAA6B,QAAQ,aAAa;;;;;;;sCAC/D,8OAAC,kIAAA,CAAA,oBAAiB;;gCAAC;gCACS,QAAQ,KAAK,CAAC,OAAO,CAAC;gCAAG;;;;;;;;;;;;;gBAGtD,6BACC,8OAAC,oLAAA,CAAA,WAAQ;oBAAC,SAAS;oBAAS,QAAQ;8BAClC,cAAA,8OAAC,4JAAA,CAAA,UAAkB;wBACf,SAAS;wBACT,kBAAkB;wBAClB,UAAU,IAAM,aAAa;;;;;;;;;;yCAIjC,8OAAC;oBAAI,WAAU;8BAAkB;;;;;;;;;;;;;;;;;AAK7C","debugId":null}},
    {"offset": {"line": 707, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/invoices/invoice-details-view.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { format } from 'date-fns';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Edit, CreditCard } from 'lucide-react';\nimport type { Invoice } from '@/lib/types';\nimport PaymentDialog from '@/components/payments/payment-dialog';\n\nconst statusVariantMap: { [key: string]: 'default' | 'secondary' | 'destructive' } = {\n  paid: 'default',\n  pending: 'secondary',\n  overdue: 'destructive',\n};\n\ninterface InvoiceDetailsViewProps {\n  invoice: Invoice;\n}\n\nexport default function InvoiceDetailsView({ invoice: initialInvoice }: InvoiceDetailsViewProps) {\n  const [invoice, setInvoice] = useState(initialInvoice);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n\n  const subtotal = invoice.subtotal || invoice.total;\n  const tax = invoice.tax || 0;\n  \n  const handlePaymentSuccess = (updatedInvoice: Invoice) => {\n    setInvoice(updatedInvoice);\n    setIsPaymentDialogOpen(false);\n  }\n\n  return (\n    <>\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-wrap items-center justify-between gap-4\">\n        <div className=\"flex items-center gap-4\">\n            <Button variant=\"outline\" size=\"icon\" asChild>\n                <Link href=\"/dashboard/invoices\">\n                    <ArrowLeft />\n                    <span className=\"sr-only\">Back to Invoices</span>\n                </Link>\n            </Button>\n            <h1 className=\"text-3xl font-headline font-bold tracking-tight\">\n            Invoice {invoice.invoiceNumber}\n            </h1>\n        </div>\n        <div className=\"flex gap-2\">\n            {invoice.status !== 'paid' && (\n              <Button onClick={() => setIsPaymentDialogOpen(true)}>\n                <CreditCard className=\"mr-2 h-4 w-4\" />\n                Process Payment\n              </Button>\n            )}\n            <Button asChild>\n                <Link href={`/dashboard/invoices/${invoice.id}/edit`}>\n                    <Edit className=\"mr-2 h-4 w-4\" />\n                    Edit Invoice\n                </Link>\n            </Button>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <CardTitle className=\"font-headline text-2xl\">Invoice Details</CardTitle>\n              <CardDescription>Issued on {format(new Date(invoice.invoiceDate), 'PPP')}</CardDescription>\n            </div>\n            <Badge variant={statusVariantMap[invoice.status]} className=\"capitalize text-lg px-4 py-1\">\n              {invoice.status}\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Billed To:</h3>\n              <p className=\"font-bold\">{invoice.client.name}</p>\n              <p>{invoice.client.email}</p>\n              <p className=\"text-muted-foreground\">{invoice.client.address}</p>\n            </div>\n            <div className=\"md:text-right\">\n              <h3 className=\"font-semibold mb-2\">Payment Details:</h3>\n              <p>Due Date: {format(new Date(invoice.dueDate), 'PPP')}</p>\n              <p>Currency: {invoice.currency}</p>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div>\n            <h3 className=\"font-semibold mb-2\">Line Items</h3>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Description</TableHead>\n                  <TableHead className=\"text-center\">Quantity</TableHead>\n                  <TableHead className=\"text-right\">Rate</TableHead>\n                  <TableHead className=\"text-right\">Amount</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {invoice.lineItems.map((item, index) => (\n                  <TableRow key={index}>\n                    <TableCell>{item.description}</TableCell>\n                    <TableCell className=\"text-center\">{item.quantity}</TableCell>\n                    <TableCell className=\"text-right\">${item.rate.toFixed(2)}</TableCell>\n                    <TableCell className=\"text-right font-medium\">${(item.quantity * item.rate).toFixed(2)}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n          \n          <Separator />\n\n          <div className=\"flex justify-end\">\n            <div className=\"text-right space-y-2 w-full max-w-xs\">\n                <div className=\"flex justify-between text-muted-foreground\">\n                    <span>Subtotal</span>\n                    <span>${subtotal.toFixed(2)}</span>\n                </div>\n                 <div className=\"flex justify-between text-muted-foreground\">\n                    <span>Tax</span>\n                    <span>${tax.toFixed(2)}</span>\n                </div>\n                 <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total</span>\n                    <span>${invoice.total.toFixed(2)}</span>\n                </div>\n            </div>\n          </div>\n          \n          {invoice.notes && (\n            <>\n              <Separator />\n              <div>\n                <h3 className=\"font-semibold mb-2\">Notes</h3>\n                <p className=\"text-muted-foreground\">{invoice.notes}</p>\n              </div>\n            </>\n          )}\n\n          {invoice.signature && invoice.signature.length > 50 && (\n             <>\n              <Separator />\n              <div>\n                <h3 className=\"font-semibold mb-2\">Signature</h3>\n                <div className=\"border rounded-md p-4 bg-gray-50 max-w-sm\">\n                    <img src={invoice.signature} alt=\"Signature\" className=\"h-24 w-full object-contain\" />\n                </div>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n    <PaymentDialog\n      isOpen={isPaymentDialogOpen}\n      onOpenChange={setIsPaymentDialogOpen}\n      invoice={invoice}\n      onPaymentSuccess={handlePaymentSuccess}\n    />\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}