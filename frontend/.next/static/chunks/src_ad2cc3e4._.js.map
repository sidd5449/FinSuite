{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAqJsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/invoices/delete-invoice-dialog.tsx"],"sourcesContent":["'use client';\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { deleteInvoiceAction } from '@/app/actions';\n\ninterface DeleteInvoiceDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  invoiceId: string;\n  invoiceNumber: string;\n  onSuccess: (invoiceId: string) => void;\n}\n\nexport default function DeleteInvoiceDialog({ isOpen, onOpenChange, invoiceId, invoiceNumber, onSuccess }: DeleteInvoiceDialogProps) {\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleDelete = async () => {\n    setLoading(true);\n    const result = await deleteInvoiceAction(invoiceId);\n    if (result.success) {\n      toast({\n        title: 'Success!',\n        description: result.message,\n      });\n      onSuccess(invoiceId);\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.error,\n      });\n    }\n    setLoading(false);\n    onOpenChange(false);\n  };\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete invoice{' '}\n            <span className=\"font-bold\">{invoiceNumber}</span>.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button onClick={handleDelete} disabled={loading} variant=\"destructive\">\n              {loading ? 'Deleting...' : 'Continue'}\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAUA;AACA;AACA;;;AAdA;;;;;;AAwBe,SAAS,oBAAoB,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAA4B;;IACjI,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,eAAe;QACnB,WAAW;QACX,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,IAAI,OAAO,OAAO,EAAE;YAClB,MAAM;gBACJ,OAAO;gBACP,aAAa,OAAO,OAAO;YAC7B;YACA,UAAU;QACZ,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,KAAK;YAC3B;QACF;QACA,WAAW;QACX,aAAa;IACf;IAEA,qBACE,6LAAC,8IAAA,CAAA,cAAW;QAAC,MAAM;QAAQ,cAAc;kBACvC,cAAA,6LAAC,8IAAA,CAAA,qBAAkB;;8BACjB,6LAAC,8IAAA,CAAA,oBAAiB;;sCAChB,6LAAC,8IAAA,CAAA,mBAAgB;sCAAC;;;;;;sCAClB,6LAAC,8IAAA,CAAA,yBAAsB;;gCAAC;gCAC6C;8CACnE,6LAAC;oCAAK,WAAU;8CAAa;;;;;;gCAAqB;;;;;;;;;;;;;8BAGtD,6LAAC,8IAAA,CAAA,oBAAiB;;sCAChB,6LAAC,8IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAS;;;;;;sCACtC,6LAAC,8IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,6LAAC,qIAAA,CAAA,SAAM;gCAAC,SAAS;gCAAc,UAAU;gCAAS,SAAQ;0CACvD,UAAU,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOzC;GA7CwB;;QAEJ,+HAAA,CAAA,WAAQ;;;KAFJ","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgKsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 518, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IAgLsB,4BAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/invoices/invoices-table.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport { Button } from '@/components/ui/button';\nimport { MoreHorizontal, Eye, Edit, Trash, Loader2, Mail } from 'lucide-react';\nimport type { Invoice } from '@/lib/types';\nimport { format } from 'date-fns';\nimport DeleteInvoiceDialog from '@/components/invoices/delete-invoice-dialog';\nimport { updateInvoiceStatusAction, sendInvoiceReminderAction } from '@/app/actions';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface InvoicesTableProps {\n  invoices: Invoice[];\n}\n\nconst statusVariantMap: { [key: string]: 'default' | 'secondary' | 'destructive' } = {\n  paid: 'default',\n  pending: 'secondary',\n  overdue: 'destructive',\n};\n\nexport default function InvoicesTable({ invoices: initialInvoices }: InvoicesTableProps) {\n  const [invoices, setInvoices] = useState(initialInvoices);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [updatingId, setUpdatingId] = useState<string | null>(null);\n  const [remindingId, setRemindingId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    setInvoices(initialInvoices);\n  }, [initialInvoices]);\n\n  const handleDeleteClick = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setDialogOpen(true);\n  };\n  \n  const handleSuccess = (deletedInvoiceId: string) => {\n    setInvoices(currentInvoices => currentInvoices.filter(inv => inv.id !== deletedInvoiceId));\n    setDialogOpen(false);\n  };\n\n  const handleStatusChange = async (invoiceId: string, status: 'paid' | 'pending' | 'overdue') => {\n    setUpdatingId(invoiceId);\n    const result = await updateInvoiceStatusAction(invoiceId, status);\n    if (result.success) {\n      toast({\n        title: 'Success!',\n        description: result.message,\n      });\n      // The revalidation should handle the update, but we can optimistically update here too\n       setInvoices(current => current.map(inv => inv.id === invoiceId ? {...inv, status: status} : inv));\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.error,\n      });\n    }\n    setUpdatingId(null);\n  };\n\n  const handleSendReminder = async (invoiceId: string) => {\n    setRemindingId(invoiceId);\n    const result = await sendInvoiceReminderAction(invoiceId);\n    if (result.success) {\n      toast({\n        title: 'Success!',\n        description: result.message,\n      });\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.error,\n      });\n    }\n    setRemindingId(null);\n  };\n\n  return (\n    <>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Invoice #</TableHead>\n            <TableHead>Client</TableHead>\n            <TableHead>Amount</TableHead>\n            <TableHead>Due Date</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {invoices.map((invoice) => (\n            <TableRow key={invoice.id}>\n              <TableCell className=\"font-medium\">{invoice.invoiceNumber}</TableCell>\n              <TableCell>{invoice.client.name}</TableCell>\n              <TableCell>${invoice.total.toLocaleString()}</TableCell>\n              <TableCell>{format(new Date(invoice.dueDate), 'MMM d, yyyy')}</TableCell>\n              <TableCell>\n                {updatingId === invoice.id ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"p-0 h-auto focus-visible:ring-1 focus-visible:ring-ring rounded-md\">\n                        <Badge variant={statusVariantMap[invoice.status]} className=\"capitalize cursor-pointer\">\n                          {invoice.status}\n                        </Badge>\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Change status</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      {(['paid', 'pending', 'overdue'] as const).map((status) => (\n                        <DropdownMenuItem\n                          key={status}\n                          disabled={invoice.status === status}\n                          onSelect={() => handleStatusChange(invoice.id, status)}\n                          className=\"capitalize\"\n                        >\n                          {status}\n                        </DropdownMenuItem>\n                      ))}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                )}\n              </TableCell>\n              <TableCell className=\"text-right\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                      <span className=\"sr-only\">Open menu</span>\n                      <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem asChild>\n                      <Link href={`/dashboard/invoices/${invoice.id}`}>\n                        <Eye className=\"mr-2 h-4 w-4\" /> View\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href={`/dashboard/invoices/${invoice.id}/edit`}>\n                        <Edit className=\"mr-2 h-4 w-4\" /> Edit\n                      </Link>\n                    </DropdownMenuItem>\n                     <DropdownMenuItem\n                        disabled={invoice.status === 'paid' || remindingId === invoice.id}\n                        onSelect={() => handleSendReminder(invoice.id)}\n                      >\n                        {remindingId === invoice.id ? (\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        ) : (\n                          <Mail className=\"mr-2 h-4 w-4\" />\n                        )}\n                        Send Reminder\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem\n                      className=\"text-destructive focus:text-destructive focus:bg-destructive/10\"\n                      onClick={() => handleDeleteClick(invoice)}\n                    >\n                      <Trash className=\"mr-2 h-4 w-4\" /> Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      {selectedInvoice && (\n        <DeleteInvoiceDialog\n          isOpen={dialogOpen}\n          onOpenChange={setDialogOpen}\n          invoiceId={selectedInvoice.id}\n          invoiceNumber={selectedInvoice.invoiceNumber}\n          onSuccess={handleSuccess}\n        />\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAQA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;;;AA3BA;;;;;;;;;;;;AAiCA,MAAM,mBAA+E;IACnF,MAAM;IACN,SAAS;IACT,SAAS;AACX;AAEe,SAAS,cAAc,EAAE,UAAU,eAAe,EAAsB;;IACrF,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC7C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB;IACvE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC5D,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,WAAQ,AAAD;IAEzB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,YAAY;QACd;kCAAG;QAAC;KAAgB;IAEpB,MAAM,oBAAoB,CAAC;QACzB,mBAAmB;QACnB,cAAc;IAChB;IAEA,MAAM,gBAAgB,CAAC;QACrB,YAAY,CAAA,kBAAmB,gBAAgB,MAAM,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK;QACxE,cAAc;IAChB;IAEA,MAAM,qBAAqB,OAAO,WAAmB;QACnD,cAAc;QACd,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,4BAAyB,AAAD,EAAE,WAAW;QAC1D,IAAI,OAAO,OAAO,EAAE;YAClB,MAAM;gBACJ,OAAO;gBACP,aAAa,OAAO,OAAO;YAC7B;YACA,uFAAuF;YACtF,YAAY,CAAA,UAAW,QAAQ,GAAG,CAAC,CAAA,MAAO,IAAI,EAAE,KAAK,YAAY;wBAAC,GAAG,GAAG;wBAAE,QAAQ;oBAAM,IAAI;QAC/F,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,KAAK;YAC3B;QACF;QACA,cAAc;IAChB;IAEA,MAAM,qBAAqB,OAAO;QAChC,eAAe;QACf,MAAM,SAAS,MAAM,CAAA,GAAA,qJAAA,CAAA,4BAAyB,AAAD,EAAE;QAC/C,IAAI,OAAO,OAAO,EAAE;YAClB,MAAM;gBACJ,OAAO;gBACP,aAAa,OAAO,OAAO;YAC7B;QACF,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,KAAK;YAC3B;QACF;QACA,eAAe;IACjB;IAEA,qBACE;;0BACE,6LAAC,oIAAA,CAAA,QAAK;;kCACJ,6LAAC,oIAAA,CAAA,cAAW;kCACV,cAAA,6LAAC,oIAAA,CAAA,WAAQ;;8CACP,6LAAC,oIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,oIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,oIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,oIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,oIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,oIAAA,CAAA,YAAS;oCAAC,WAAU;8CAAa;;;;;;;;;;;;;;;;;kCAGtC,6LAAC,oIAAA,CAAA,YAAS;kCACP,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC,oIAAA,CAAA,WAAQ;;kDACP,6LAAC,oIAAA,CAAA,YAAS;wCAAC,WAAU;kDAAe,QAAQ,aAAa;;;;;;kDACzD,6LAAC,oIAAA,CAAA,YAAS;kDAAE,QAAQ,MAAM,CAAC,IAAI;;;;;;kDAC/B,6LAAC,oIAAA,CAAA,YAAS;;4CAAC;4CAAE,QAAQ,KAAK,CAAC,cAAc;;;;;;;kDACzC,6LAAC,oIAAA,CAAA,YAAS;kDAAE,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,QAAQ,OAAO,GAAG;;;;;;kDAC9C,6LAAC,oIAAA,CAAA,YAAS;kDACP,eAAe,QAAQ,EAAE,iBACxB,6LAAC,oNAAA,CAAA,UAAO;4CAAC,WAAU;;;;;iEAEnB,6LAAC,+IAAA,CAAA,eAAY;;8DACX,6LAAC,+IAAA,CAAA,sBAAmB;oDAAC,OAAO;8DAC1B,cAAA,6LAAC,qIAAA,CAAA,SAAM;wDAAC,SAAQ;wDAAQ,WAAU;kEAChC,cAAA,6LAAC,oIAAA,CAAA,QAAK;4DAAC,SAAS,gBAAgB,CAAC,QAAQ,MAAM,CAAC;4DAAE,WAAU;sEACzD,QAAQ,MAAM;;;;;;;;;;;;;;;;8DAIrB,6LAAC,+IAAA,CAAA,sBAAmB;oDAAC,OAAM;;sEACzB,6LAAC,+IAAA,CAAA,oBAAiB;sEAAC;;;;;;sEACnB,6LAAC,+IAAA,CAAA,wBAAqB;;;;;wDACpB;4DAAC;4DAAQ;4DAAW;yDAAU,CAAW,GAAG,CAAC,CAAC,uBAC9C,6LAAC,+IAAA,CAAA,mBAAgB;gEAEf,UAAU,QAAQ,MAAM,KAAK;gEAC7B,UAAU,IAAM,mBAAmB,QAAQ,EAAE,EAAE;gEAC/C,WAAU;0EAET;+DALI;;;;;;;;;;;;;;;;;;;;;;kDAYjB,6LAAC,oIAAA,CAAA,YAAS;wCAAC,WAAU;kDACnB,cAAA,6LAAC,+IAAA,CAAA,eAAY;;8DACX,6LAAC,+IAAA,CAAA,sBAAmB;oDAAC,OAAO;8DAC1B,cAAA,6LAAC,qIAAA,CAAA,SAAM;wDAAC,SAAQ;wDAAQ,WAAU;;0EAChC,6LAAC;gEAAK,WAAU;0EAAU;;;;;;0EAC1B,6LAAC,mNAAA,CAAA,iBAAc;gEAAC,WAAU;;;;;;;;;;;;;;;;;8DAG9B,6LAAC,+IAAA,CAAA,sBAAmB;oDAAC,OAAM;;sEACzB,6LAAC,+IAAA,CAAA,mBAAgB;4DAAC,OAAO;sEACvB,cAAA,6LAAC,+JAAA,CAAA,UAAI;gEAAC,MAAM,CAAC,oBAAoB,EAAE,QAAQ,EAAE,EAAE;;kFAC7C,6LAAC,mMAAA,CAAA,MAAG;wEAAC,WAAU;;;;;;oEAAiB;;;;;;;;;;;;sEAGpC,6LAAC,+IAAA,CAAA,mBAAgB;4DAAC,OAAO;sEACvB,cAAA,6LAAC,+JAAA,CAAA,UAAI;gEAAC,MAAM,CAAC,oBAAoB,EAAE,QAAQ,EAAE,CAAC,KAAK,CAAC;;kFAClD,6LAAC,8MAAA,CAAA,OAAI;wEAAC,WAAU;;;;;;oEAAiB;;;;;;;;;;;;sEAGpC,6LAAC,+IAAA,CAAA,mBAAgB;4DACd,UAAU,QAAQ,MAAM,KAAK,UAAU,gBAAgB,QAAQ,EAAE;4DACjE,UAAU,IAAM,mBAAmB,QAAQ,EAAE;;gEAE5C,gBAAgB,QAAQ,EAAE,iBACzB,6LAAC,oNAAA,CAAA,UAAO;oEAAC,WAAU;;;;;yFAEnB,6LAAC,qMAAA,CAAA,OAAI;oEAAC,WAAU;;;;;;gEAChB;;;;;;;sEAGN,6LAAC,+IAAA,CAAA,wBAAqB;;;;;sEACtB,6LAAC,+IAAA,CAAA,mBAAgB;4DACf,WAAU;4DACV,SAAS,IAAM,kBAAkB;;8EAEjC,6LAAC,uMAAA,CAAA,QAAK;oEAAC,WAAU;;;;;;gEAAiB;;;;;;;;;;;;;;;;;;;;;;;;;+BArE7B,QAAQ,EAAE;;;;;;;;;;;;;;;;YA8E9B,iCACC,6LAAC,gKAAA,CAAA,UAAmB;gBAClB,QAAQ;gBACR,cAAc;gBACd,WAAW,gBAAgB,EAAE;gBAC7B,eAAe,gBAAgB,aAAa;gBAC5C,WAAW;;;;;;;;AAKrB;GApKwB;;QAMJ,+HAAA,CAAA,WAAQ;;;KANJ","debugId":null}},
    {"offset": {"line": 1010, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1113, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AAAA;AAAA;AAEA;;;AALA;;;;AAOA,uCAAuC;AACvC,MAAM,SAAS;IAAE,OAAO;IAAI,MAAM;AAAQ;AAgB1C,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,gBAAmB,AAAD,EAA4B;AAEnE,SAAS;;IACP,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAAE;IAEjC,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;GARS;AAUT,MAAM,+BAAiB,IAAA,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,WAQpC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,OAAO,EAAE;;IAChD,MAAM,WAAW,CAAA,GAAA,6JAAA,CAAA,QAAW,AAAD;IAC3B,MAAM,UAAU,CAAC,MAAM,EAAE,MAAM,SAAS,OAAO,CAAC,MAAM,KAAK;IAE3D,qBACE,6LAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC,cAAA,6LAAC;YACC,cAAY;YACZ,KAAK;YACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,ypBACA;YAED,GAAG,KAAK;;8BAET,6LAAC;oBAAW,IAAI;oBAAS,QAAQ;;;;;;8BACjC,6LAAC,sKAAA,CAAA,sBAAqC;8BACnC;;;;;;;;;;;;;;;;;AAKX;;AACA,eAAe,WAAW,GAAG;AAE7B,MAAM,aAAa,CAAC,EAAE,EAAE,EAAE,MAAM,EAAuC;IACrE,MAAM,cAAc,OAAO,OAAO,CAAC,QAAQ,MAAM,CAC/C,CAAC,GAAG,OAAO,GAAK,OAAO,KAAK,IAAI,OAAO,KAAK;IAG9C,IAAI,CAAC,YAAY,MAAM,EAAE;QACvB,OAAO;IACT;IAEA,qBACE,6LAAC;QACC,yBAAyB;YACvB,QAAQ,OAAO,OAAO,CAAC,QACpB,GAAG,CACF,CAAC,CAAC,OAAO,OAAO,GAAK,CAAC;AAClC,EAAE,OAAO,aAAa,EAAE,GAAG;AAC3B,EAAE,YACC,GAAG,CAAC,CAAC,CAAC,KAAK,WAAW;oBACrB,MAAM,QACJ,WAAW,KAAK,EAAE,CAAC,MAAuC,IAC1D,WAAW,KAAK;oBAClB,OAAO,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,GAAG;gBACjD,GACC,IAAI,CAAC,MAAM;;AAEd,CAAC,EAEU,IAAI,CAAC;QACV;;;;;;AAGN;MA/BM;AAiCN,MAAM,eAAe,0JAAA,CAAA,UAAyB;AAE9C,MAAM,oCAAsB,IAAA,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,YAWzC,CACE,EACE,MAAM,EACN,OAAO,EACP,SAAS,EACT,YAAY,KAAK,EACjB,YAAY,KAAK,EACjB,gBAAgB,KAAK,EACrB,KAAK,EACL,cAAc,EACd,cAAc,EACd,SAAS,EACT,KAAK,EACL,OAAO,EACP,QAAQ,EACT,EACD;;IAEA,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,MAAM,eAAe,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;qDAAE;YACjC,IAAI,aAAa,CAAC,SAAS,QAAQ;gBACjC,OAAO;YACT;YAEA,MAAM,CAAC,KAAK,GAAG;YACf,MAAM,MAAM,GAAG,YAAY,KAAK,OAAO,IAAI,KAAK,IAAI,IAAI,SAAS;YACjE,MAAM,aAAa,4BAA4B,QAAQ,MAAM;YAC7D,MAAM,QACJ,CAAC,YAAY,OAAO,UAAU,WAC1B,MAAM,CAAC,MAA6B,EAAE,SAAS,QAC/C,YAAY;YAElB,IAAI,gBAAgB;gBAClB,qBACE,6LAAC;oBAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;8BAC/B,eAAe,OAAO;;;;;;YAG7B;YAEA,IAAI,CAAC,OAAO;gBACV,OAAO;YACT;YAEA,qBAAO,6LAAC;gBAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;0BAAkB;;;;;;QAC7D;oDAAG;QACD;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,IAAI,CAAC,UAAU,CAAC,SAAS,QAAQ;QAC/B,OAAO;IACT;IAEA,MAAM,YAAY,QAAQ,MAAM,KAAK,KAAK,cAAc;IAExD,qBACE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0HACA;;YAGD,CAAC,YAAY,eAAe;0BAC7B,6LAAC;gBAAI,WAAU;0BACZ,QAAQ,GAAG,CAAC,CAAC,MAAM;oBAClB,MAAM,MAAM,GAAG,WAAW,KAAK,IAAI,IAAI,KAAK,OAAO,IAAI,SAAS;oBAChE,MAAM,aAAa,4BAA4B,QAAQ,MAAM;oBAC7D,MAAM,iBAAiB,SAAS,KAAK,OAAO,CAAC,IAAI,IAAI,KAAK,KAAK;oBAE/D,qBACE,6LAAC;wBAEC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uGACA,cAAc,SAAS;kCAGxB,aAAa,MAAM,UAAU,aAAa,KAAK,IAAI,GAClD,UAAU,KAAK,KAAK,EAAE,KAAK,IAAI,EAAE,MAAM,OAAO,KAAK,OAAO,kBAE1D;;gCACG,YAAY,qBACX,6LAAC,WAAW,IAAI;;;;2CAEhB,CAAC,+BACC,6LAAC;oCACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kEACA;wCACE,eAAe,cAAc;wCAC7B,OAAO,cAAc;wCACrB,mDACE,cAAc;wCAChB,UAAU,aAAa,cAAc;oCACvC;oCAEF,OACE;wCACE,cAAc;wCACd,kBAAkB;oCACpB;;;;;;8CAKR,6LAAC;oCACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4CACA,YAAY,cAAc;;sDAG5B,6LAAC;4CAAI,WAAU;;gDACZ,YAAY,eAAe;8DAC5B,6LAAC;oDAAK,WAAU;8DACb,YAAY,SAAS,KAAK,IAAI;;;;;;;;;;;;wCAGlC,KAAK,KAAK,kBACT,6LAAC;4CAAK,WAAU;sDACb,KAAK,KAAK,CAAC,cAAc;;;;;;;;;;;;;;uBAhD/B,KAAK,OAAO;;;;;gBAwDvB;;;;;;;;;;;;AAIR;;QAzHqB;;;;QAAA;;;;AA2HvB,oBAAoB,WAAW,GAAG;AAElC,MAAM,cAAc,yJAAA,CAAA,SAAwB;AAE5C,MAAM,mCAAqB,IAAA,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,YAQxC,CACE,EAAE,SAAS,EAAE,WAAW,KAAK,EAAE,OAAO,EAAE,gBAAgB,QAAQ,EAAE,OAAO,EAAE,EAC3E;;IAEA,MAAM,EAAE,MAAM,EAAE,GAAG;IAEnB,IAAI,CAAC,SAAS,QAAQ;QACpB,OAAO;IACT;IAEA,qBACE,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,0CACA,kBAAkB,QAAQ,SAAS,QACnC;kBAGD,QAAQ,GAAG,CAAC,CAAC;YACZ,MAAM,MAAM,GAAG,WAAW,KAAK,OAAO,IAAI,SAAS;YACnD,MAAM,aAAa,4BAA4B,QAAQ,MAAM;YAE7D,qBACE,6LAAC;gBAEC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV;;oBAGD,YAAY,QAAQ,CAAC,yBACpB,6LAAC,WAAW,IAAI;;;;6CAEhB,6LAAC;wBACC,WAAU;wBACV,OAAO;4BACL,iBAAiB,KAAK,KAAK;wBAC7B;;;;;;oBAGH,YAAY;;eAfR,KAAK,KAAK;;;;;QAkBrB;;;;;;AAGN;;QA1CqB;;;;QAAA;;;;AA4CvB,mBAAmB,WAAW,GAAG;AAEjC,gDAAgD;AAChD,SAAS,4BACP,MAAmB,EACnB,OAAgB,EAChB,GAAW;IAEX,IAAI,OAAO,YAAY,YAAY,YAAY,MAAM;QACnD,OAAO;IACT;IAEA,MAAM,iBACJ,aAAa,WACb,OAAO,QAAQ,OAAO,KAAK,YAC3B,QAAQ,OAAO,KAAK,OAChB,QAAQ,OAAO,GACf;IAEN,IAAI,iBAAyB;IAE7B,IACE,OAAO,WACP,OAAO,OAAO,CAAC,IAA4B,KAAK,UAChD;QACA,iBAAiB,OAAO,CAAC,IAA4B;IACvD,OAAO,IACL,kBACA,OAAO,kBACP,OAAO,cAAc,CAAC,IAAmC,KAAK,UAC9D;QACA,iBAAiB,cAAc,CAC7B,IACD;IACH;IAEA,OAAO,kBAAkB,SACrB,MAAM,CAAC,eAAe,GACtB,MAAM,CAAC,IAA2B;AACxC","debugId":null}},
    {"offset": {"line": 1448, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/calendar.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAWA,SAAS,SAAS,EAChB,SAAS,EACT,UAAU,EACV,kBAAkB,IAAI,EACtB,GAAG,OACW;IACd,qBACE,6LAAC,iKAAA,CAAA,YAAS;QACR,iBAAiB;QACjB,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,OAAO;QACrB,YAAY;YACV,QAAQ;YACR,OAAO;YACP,SAAS;YACT,eAAe;YACf,KAAK;YACL,YAAY,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACX,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAU,IACpC;YAEF,qBAAqB;YACrB,iBAAiB;YACjB,OAAO;YACP,UAAU;YACV,WACE;YACF,KAAK;YACL,MAAM;YACN,KAAK,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACJ,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,SAAS;YAAQ,IAClC;YAEF,eAAe;YACf,cACE;YACF,WAAW;YACX,aACE;YACF,cAAc;YACd,kBACE;YACF,YAAY;YACZ,GAAG,UAAU;QACf;QACA,YAAY;YACV,UAAU,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,iBAChC,6LAAC,uNAAA,CAAA,cAAW;oBAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,WAAW;oBAAa,GAAG,KAAK;;;;;;YAE7D,WAAW,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,iBACjC,6LAAC,yNAAA,CAAA,eAAY;oBAAC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,WAAW;oBAAa,GAAG,KAAK;;;;;;QAEhE;QACC,GAAG,KAAK;;;;;;AAGf;KAvDS;AAwDT,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,sKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,sKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,6LAAC,sKAAA,CAAA,SAAuB;kBACtB,cAAA,6LAAC,sKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,sKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1582, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard/revenue-chart.tsx"],"sourcesContent":["'use client'\n\nimport * as React from \"react\"\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\"\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\nimport type { Invoice } from '@/lib/types'\nimport { format, subMonths, startOfMonth, eachMonthOfInterval } from 'date-fns'\nimport { Calendar as CalendarIcon } from \"lucide-react\"\nimport { type DateRange } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface RevenueChartProps {\n  invoices: Invoice[];\n}\n\nconst chartConfig = {\n  invoiced: {\n    label: \"Invoiced\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  paid: {\n    label: \"Paid\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nexport default function RevenueChart({ invoices }: RevenueChartProps) {\n  const [date, setDate] = React.useState<DateRange | undefined>({\n    from: subMonths(new Date(), 5),\n    to: new Date(),\n  });\n  \n  const processData = () => {\n    const fromDate = date?.from;\n    const toDate = date?.to || date?.from;\n\n    let monthsToDisplay: Date[];\n\n    if (fromDate && toDate) {\n        monthsToDisplay = eachMonthOfInterval({\n            start: startOfMonth(fromDate),\n            end: startOfMonth(toDate),\n        });\n    } else {\n        // Fallback to last 6 months if no dates are set at all\n        monthsToDisplay = Array.from({ length: 6 }).map((_, i) => subMonths(new Date(), i)).reverse();\n    }\n    \n    const monthlyData = monthsToDisplay.map(monthStart => {\n        const monthName = format(monthStart, 'MMM yyyy');\n        \n        // Filter all invoices to find ones that fall into the current month of the iteration\n        const monthlyInvoices = invoices.filter(inv => {\n            const invoiceDate = new Date(inv.invoiceDate);\n            return format(invoiceDate, 'yyyy-MM') === format(monthStart, 'yyyy-MM');\n        });\n\n        const totalInvoiced = monthlyInvoices.reduce((sum, inv) => sum + inv.total, 0);\n        const totalPaid = monthlyInvoices\n            .filter(inv => inv.status === 'paid')\n            .reduce((sum, inv) => sum + inv.total, 0);\n\n        return {\n            month: monthName,\n            invoiced: totalInvoiced,\n            paid: totalPaid,\n        }\n    });\n\n    return monthlyData;\n  }\n  \n  const chartData = processData();\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-col sm:flex-row items-start justify-between gap-4\">\n        <div>\n          <CardTitle className=\"font-headline\">Monthly Overview</CardTitle>\n          <CardDescription>Invoiced vs. Paid amounts for the selected period.</CardDescription>\n        </div>\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              id=\"date\"\n              variant={\"outline\"}\n              className={cn(\n                \"w-full sm:w-[260px] justify-start text-left font-normal\",\n                !date && \"text-muted-foreground\"\n              )}\n            >\n              <CalendarIcon className=\"mr-2 h-4 w-4\" />\n              {date?.from ? (\n                date.to ? (\n                  <>\n                    {format(date.from, \"LLL dd, y\")} -{\" \"}\n                    {format(date.to, \"LLL dd, y\")}\n                  </>\n                ) : (\n                  format(date.from, \"LLL dd, y\")\n                )\n              ) : (\n                <span>Pick a date range</span>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"end\">\n            <Calendar\n              initialFocus\n              mode=\"range\"\n              defaultMonth={date?.from}\n              selected={date}\n              onSelect={setDate}\n              numberOfMonths={2}\n            />\n          </PopoverContent>\n        </Popover>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig} className=\"min-h-[300px] w-full\">\n          <BarChart data={chartData} accessibilityLayer>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <YAxis \n                tickFormatter={(value) => `$${Number(value) / 1000}k`}\n            />\n            <ChartTooltip\n              content={<ChartTooltipContent />}\n              cursor={false}\n            />\n             <ChartLegend content={<ChartLegendContent />} />\n            <Bar dataKey=\"invoiced\" fill=\"var(--color-invoiced)\" radius={4} />\n            <Bar dataKey=\"paid\" fill=\"var(--color-paid)\" radius={4} />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1876, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dashboard/status-pie-chart.tsx"],"sourcesContent":["'use client'\n\nimport * as React from \"react\"\nimport { Pie, PieChart } from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  type ChartConfig,\n} from \"@/components/ui/chart\"\nimport type { Invoice } from '@/lib/types'\n\ninterface StatusPieChartProps {\n  invoices: Invoice[];\n}\n\nconst chartConfig = {\n  paid: {\n    label: \"Paid\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  pending: {\n    label: \"Pending\",\n    color: \"hsl(var(--chart-4))\",\n  },\n  overdue: {\n    label: \"Overdue\",\n    color: \"hsl(var(--chart-5))\",\n  },\n} satisfies ChartConfig\n\nexport default function StatusPieChart({ invoices }: StatusPieChartProps) {\n  const chartData = React.useMemo(() => {\n    const paid = invoices.filter(inv => inv.status === 'paid').length;\n    const pending = invoices.filter(inv => inv.status === 'pending').length;\n    const overdue = invoices.filter(inv => inv.status === 'overdue').length;\n\n    return [\n      { status: 'paid', count: paid, fill: 'var(--color-paid)' },\n      { status: 'pending', count: pending, fill: 'var(--color-pending)' },\n      { status: 'overdue', count: overdue, fill: 'var(--color-overdue)' },\n    ].filter(item => item.count > 0);\n  }, [invoices]);\n\n  const totalInvoices = React.useMemo(() => {\n      return invoices.length;\n  }, [invoices]);\n\n  return (\n    <Card className=\"flex flex-col h-full\">\n      <CardHeader>\n        <CardTitle className=\"font-headline\">Invoices by Status</CardTitle>\n        <CardDescription>A breakdown of your current invoices.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[300px]\"\n        >\n          <PieChart>\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            <Pie\n              data={chartData}\n              dataKey=\"count\"\n              nameKey=\"status\"\n              innerRadius={60}\n              strokeWidth={5}\n            >\n            </Pie>\n            <ChartLegend\n              content={<ChartLegendContent nameKey=\"status\" />}\n              className=\"-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/3 [&>*]:justify-center\"\n            />\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAEA;AAOA;;;AAZA;;;;;AA0BA,MAAM,cAAc;IAClB,MAAM;QACJ,OAAO;QACP,OAAO;IACT;IACA,SAAS;QACP,OAAO;QACP,OAAO;IACT;IACA,SAAS;QACP,OAAO;QACP,OAAO;IACT;AACF;AAEe,SAAS,eAAe,EAAE,QAAQ,EAAuB;;IACtE,MAAM,YAAY,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;6CAAE;YAC9B,MAAM,OAAO,SAAS,MAAM;qDAAC,CAAA,MAAO,IAAI,MAAM,KAAK;oDAAQ,MAAM;YACjE,MAAM,UAAU,SAAS,MAAM;qDAAC,CAAA,MAAO,IAAI,MAAM,KAAK;oDAAW,MAAM;YACvE,MAAM,UAAU,SAAS,MAAM;qDAAC,CAAA,MAAO,IAAI,MAAM,KAAK;oDAAW,MAAM;YAEvE,OAAO;gBACL;oBAAE,QAAQ;oBAAQ,OAAO;oBAAM,MAAM;gBAAoB;gBACzD;oBAAE,QAAQ;oBAAW,OAAO;oBAAS,MAAM;gBAAuB;gBAClE;oBAAE,QAAQ;oBAAW,OAAO;oBAAS,MAAM;gBAAuB;aACnE,CAAC,MAAM;qDAAC,CAAA,OAAQ,KAAK,KAAK,GAAG;;QAChC;4CAAG;QAAC;KAAS;IAEb,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,UAAa,AAAD;iDAAE;YAChC,OAAO,SAAS,MAAM;QAC1B;gDAAG;QAAC;KAAS;IAEb,qBACE,6LAAC,mIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,6LAAC,mIAAA,CAAA,aAAU;;kCACT,6LAAC,mIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAgB;;;;;;kCACrC,6LAAC,mIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,6LAAC,mIAAA,CAAA,cAAW;gBAAC,WAAU;0BACrB,cAAA,6LAAC,oIAAA,CAAA,iBAAc;oBACb,QAAQ;oBACR,WAAU;8BAEV,cAAA,6LAAC,uJAAA,CAAA,WAAQ;;0CACP,6LAAC,oIAAA,CAAA,eAAY;gCACX,QAAQ;gCACR,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;oCAAC,SAAS;;;;;;;;;;;0CAEzC,6LAAC,kJAAA,CAAA,MAAG;gCACF,MAAM;gCACN,SAAQ;gCACR,SAAQ;gCACR,aAAa;gCACb,aAAa;;;;;;0CAGf,6LAAC,oIAAA,CAAA,cAAW;gCACV,uBAAS,6LAAC,oIAAA,CAAA,qBAAkB;oCAAC,SAAQ;;;;;;gCACrC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOxB;GAlDwB;KAAA","debugId":null}},
    {"offset": {"line": 2057, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2092, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2131, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2349, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { generateFinancialInsights } from '@/ai/flows/generate-financial-insights'\nimport { generateInvoiceFromText } from '@/ai/flows/generate-invoice-from-text'\nimport { calculateTax } from '@/ai/flows/calculate-tax'\nimport { invoiceSchema, clientSchema } from '@/lib/types'\nimport { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nconst API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1, 'Password is required')\n})\n\n// --- Helper function for API calls ---\nasync function apiFetch(url: string, options: RequestInit = {}) {\n  try {\n    const res = await fetch(`${API_BASE_URL}${url}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({ message: `Request failed with status ${res.status}` }));\n      throw new Error(errorBody.message || 'An API error occurred');\n    }\n\n    if (res.status === 204) { // No Content\n        return null;\n    }\n\n    return await res.json();\n  } catch (error) {\n    console.error(`API Error fetching ${url}:`, error);\n    const message = error instanceof Error ? error.message : 'An unknown network error occurred';\n    throw new Error(message);\n  }\n}\n\n\nexport async function loginAction(data: z.infer<typeof loginSchema>) {\n  const parsedData = loginSchema.safeParse(data);\n  if (!parsedData.success) {\n      return { success: false, error: \"Invalid data provided.\"}\n  }\n\n  const { email, password } = parsedData.data;\n\n  // Mock authentication logic - in a real app, this would call an API\n  if (email === 'user@example.com' && password === 'password') {\n    cookies().set('session', 'mock-session-token', {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      path: '/',\n      // Removed maxAge to make it a session cookie\n    })\n    return { success: true }\n  } else {\n    return { success: false, error: 'Invalid credentials.' }\n  }\n}\n\nexport async function logoutAction() {\n  cookies().delete('session')\n  redirect('/login')\n}\n\n// --- Invoice Actions ---\n\nexport async function getInvoicesAction(params?: { clientId?: string }) {\n  try {\n    const url = params?.clientId ? `/invoices?clientId=${params.clientId}` : '/invoices';\n    const invoices = await apiFetch(url);\n    return { success: true, data: invoices };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch invoices.' };\n  }\n}\n\nexport async function createInvoiceAction(data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  \n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const newInvoiceData = { ...parsedData.data, subtotal, tax, total };\n    \n    await apiFetch('/invoices', {\n      method: 'POST',\n      body: JSON.stringify(newInvoiceData),\n    });\n    \n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice created successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to create invoice.' };\n  }\n}\n\nexport async function getInvoiceByIdAction(id: string) {\n  try {\n    const invoice = await apiFetch(`/invoices/${id}`);\n    return { success: true, data: invoice };\n  } catch (error) {\n    return { success: false, error: 'Invoice not found.' };\n  }\n}\n\nexport async function updateInvoiceAction(id: string, data: z.infer<typeof invoiceSchema>) {\n  const parsedData = invoiceSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n\n  try {\n    const subtotal = parsedData.data.lineItems.reduce((sum, item) => sum + item.quantity * item.rate, 0);\n    const tax = parsedData.data.tax || 0;\n    const total = subtotal + tax;\n\n    const updatedInvoiceData = { ...parsedData.data, subtotal, tax, total };\n\n    await apiFetch(`/invoices/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updatedInvoiceData),\n    });\n\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath(`/dashboard/invoices/${id}/edit`);\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice ${data.invoiceNumber} updated successfully!` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice.' };\n  }\n}\n\nexport async function deleteInvoiceAction(id: string) {\n  try {\n    await apiFetch(`/invoices/${id}`, { method: 'DELETE' });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: 'Invoice deleted successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to delete invoice.' };\n  }\n}\n\nexport async function updateInvoiceStatusAction(id: string, status: 'paid' | 'pending' | 'overdue') {\n  try {\n    await apiFetch(`/invoices/${id}/status`, {\n      method: 'PUT',\n      body: JSON.stringify({ status }),\n    });\n    revalidatePath('/dashboard/invoices');\n    revalidatePath(`/dashboard/invoices/${id}`);\n    revalidatePath('/dashboard'); // For the stats cards\n    revalidatePath('/dashboard/payments');\n    return { success: true, message: `Invoice status updated to ${status}.` };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to update invoice status.' };\n  }\n}\n\nexport async function sendInvoiceReminderAction(invoiceId: string) {\n  try {\n    const result = await apiFetch(`/invoices/${invoiceId}/remind`, { method: 'POST' });\n    return { success: true, message: result.message || 'Reminder sent successfully!' };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to send reminder.' };\n  }\n}\n\n// --- Client Actions ---\n\nexport async function getClientsAction() {\n    try {\n        const clients = await apiFetch('/clients');\n        return { success: true, data: clients };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch clients.' };\n    }\n}\n\nexport async function getClientByIdAction(id: string) {\n    try {\n        const client = await apiFetch(`/clients/${id}`);\n        return { success: true, data: client };\n    } catch (error) {\n        return { success: false, error: 'Client not found.' };\n    }\n}\n\nexport async function createClientAction(data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: \"Invalid data provided.\"}\n    }\n    try {\n        await apiFetch('/clients', {\n            method: 'POST',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client created successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create client.' };\n    }\n}\n\nexport async function updateClientAction(id: string, data: z.infer<typeof clientSchema>) {\n    const parsedData = clientSchema.safeParse(data);\n    if (!parsedData.success) {\n        return { success: false, error: 'Invalid data provided.'}\n    }\n    try {\n        await apiFetch(`/clients/${id}`, {\n            method: 'PUT',\n            body: JSON.stringify(parsedData.data),\n        });\n        revalidatePath('/dashboard/clients');\n        revalidatePath(`/dashboard/clients/${id}`);\n        revalidatePath(`/dashboard/clients/${id}/edit`);\n        return { success: true, message: `Client ${data.name} updated successfully!` };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to update client.' };\n    }\n}\n\nexport async function deleteClientAction(id: string) {\n    try {\n        await apiFetch(`/clients/${id}`, { method: 'DELETE' });\n        revalidatePath('/dashboard/clients');\n        return { success: true, message: 'Client deleted successfully!' };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to delete client.' };\n    }\n}\n\nconst noteFormSchema = z.object({\n  content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\nexport async function addClientNoteAction(clientId: string, data: z.infer<typeof noteFormSchema>) {\n  const parsedData = noteFormSchema.safeParse(data);\n  if (!parsedData.success) {\n    return { success: false, error: 'Invalid data provided.' };\n  }\n  try {\n    const updatedClient = await apiFetch(`/clients/${clientId}/notes`, {\n      method: 'POST',\n      body: JSON.stringify(parsedData.data),\n    });\n    revalidatePath(`/dashboard/clients/${clientId}`);\n    return { success: true, message: 'Note added successfully!', data: updatedClient };\n  } catch (error) {\n    return { success: false, error: error instanceof Error ? error.message : 'Failed to add note.' };\n  }\n}\n\n// --- Payment Actions ---\n\nexport async function getPaymentsAction() {\n    try {\n        const payments = await apiFetch('/payments');\n        return { success: true, data: payments };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to fetch payments.' };\n    }\n}\n\n// --- Stripe / Payment Gateway Actions ---\nexport async function createPaymentIntentAction(amount: number, currency: string) {\n    try {\n        const result = await apiFetch('/stripe/create-payment-intent', {\n            method: 'POST',\n            body: JSON.stringify({ amount, currency }),\n        });\n        return { success: true, clientSecret: result.clientSecret };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to create payment intent.' };\n    }\n}\n\nexport async function confirmStripePaymentAction(invoiceId: string, paymentIntentId: string) {\n    try {\n        const updatedInvoice = await apiFetch(`/invoices/${invoiceId}/confirm-payment`, {\n            method: 'POST',\n            body: JSON.stringify({ paymentIntentId }),\n        });\n        revalidatePath(`/dashboard/invoices/${invoiceId}`);\n        revalidatePath('/dashboard/invoices');\n        revalidatePath('/dashboard/payments');\n        return { success: true, message: 'Payment confirmed successfully!', data: updatedInvoice };\n    } catch (error) {\n        return { success: false, error: error instanceof Error ? error.message : 'Failed to confirm payment.' };\n    }\n}\n\n// --- AI Actions ---\n\nexport async function getFinancialInsightsAction() {\n  try {\n    const [invoicesResult, paymentsResult] = await Promise.all([\n      getInvoicesAction(),\n      getPaymentsAction(),\n    ]);\n\n    if (!invoicesResult.success || !paymentsResult.success) {\n      throw new Error('Failed to fetch financial data for analysis.');\n    }\n\n    const insights = await generateFinancialInsights({\n      invoiceData: JSON.stringify(invoicesResult.data),\n      paymentData: JSON.stringify(paymentsResult.data),\n    })\n    return { success: true, data: insights }\n  } catch (error) {\n    console.error('Error generating financial insights:', error)\n    return { success: false, error: 'Failed to generate financial insights.' }\n  }\n}\n\nexport async function generateInvoiceFromTextAction(text: string) {\n  try {\n    const result = await generateInvoiceFromText(text);\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error generating invoice from text:', error);\n    return { success: false, error: 'Failed to generate invoice from text.' };\n  }\n}\n\nexport async function calculateTaxAction(address: string, subtotal: number) {\n  try {\n    const result = await calculateTax({ address, subtotal });\n    return { success: true, data: result };\n  } catch (error) {\n    console.error('Error calculating tax:', error);\n    return { success: false, error: 'Failed to calculate tax with AI.' };\n  }\n}\n"],"names":[],"mappings":";;;;;;IA+PsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2365, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2442, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/clients/client-notes.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { format } from 'date-fns';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { addClientNoteAction } from '@/app/actions';\nimport { type ClientWithId, type Note } from '@/lib/types';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\n\nconst noteFormSchema = z.object({\n    content: z.string().min(1, 'Note content cannot be empty.'),\n});\n\ninterface ClientNotesProps {\n    client: ClientWithId;\n}\n\nexport default function ClientNotes({ client }: ClientNotesProps) {\n    const [notes, setNotes] = useState<Note[]>(client.notes || []);\n    const { toast } = useToast();\n\n    const form = useForm<z.infer<typeof noteFormSchema>>({\n        resolver: zodResolver(noteFormSchema),\n        defaultValues: { content: '' },\n    });\n\n    async function onSubmit(data: z.infer<typeof noteFormSchema>) {\n        const result = await addClientNoteAction(client.id, data);\n\n        if (result.success && result.data?.notes) {\n            toast({\n                title: 'Note Added',\n                description: 'The note has been successfully added to the client.',\n            });\n            setNotes(result.data.notes);\n            form.reset();\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result.error,\n            });\n        }\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle className=\"font-headline\">Client Log</CardTitle>\n                <CardDescription>Record interactions, notes, and important information.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                        <FormField\n                            control={form.control}\n                            name=\"content\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormControl>\n                                        <Textarea placeholder=\"Add a new note...\" {...field} rows={3} />\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <div className=\"flex justify-end\">\n                            <Button type=\"submit\" disabled={form.formState.isSubmitting}>\n                                {form.formState.isSubmitting ? 'Adding...' : 'Add Note'}\n                            </Button>\n                        </div>\n                    </form>\n                </Form>\n                <Separator className=\"my-6\" />\n                <h4 className=\"text-sm font-medium mb-4\">History</h4>\n                {notes.length > 0 ? (\n                    <ScrollArea className=\"h-72\">\n                        <div className=\"space-y-6 pr-4\">\n                            {notes.map((note) => (\n                                <div key={note._id} className=\"text-sm\">\n                                    <p className=\"text-muted-foreground whitespace-pre-wrap\">{note.content}</p>\n                                    <p className=\"text-xs text-muted-foreground/80 mt-1\">\n                                        {format(new Date(note.date), 'PPP p')}\n                                    </p>\n                                </div>\n                            ))}\n                        </div>\n                    </ScrollArea>\n                ) : (\n                    <p className=\"text-sm text-muted-foreground text-center py-4\">No notes for this client yet.</p>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}